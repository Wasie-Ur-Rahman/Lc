{
    "variables": [
        {
            "description": "The contrast ratio to reach against white, to determine if color changes from \"light\" to \"dark\".\nAcceptable values for WCAG 2.0 are 3, 4.5 and 7.\n",
            "commentRange": {
                "start": 273,
                "end": 279
            },
            "context": {
                "type": "variable",
                "name": "wcag-min-contrast-ratio",
                "value": "7",
                "scope": "default",
                "line": {
                    "start": 280,
                    "end": 280
                }
            },
            "type": "Number",
            "group": [
                "accessibility"
            ],
            "link": [
                {
                    "url": "https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast",
                    "caption": ""
                },
                {
                    "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                    "caption": ""
                }
            ],
            "access": "public",
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "resolvedValue": "7",
            "resolvedType": "Number"
        },
        {
            "description": "Default dark color for WCAG 2.0.\n",
            "commentRange": {
                "start": 281,
                "end": 283
            },
            "context": {
                "type": "variable",
                "name": "wcag-dark",
                "value": "black",
                "scope": "default",
                "line": {
                    "start": 284,
                    "end": 284
                }
            },
            "type": "Color",
            "group": [
                "accessibility"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "resolvedValue": "black",
            "resolvedType": "Color"
        },
        {
            "description": "Default light color for WCAG 2.0.\n",
            "commentRange": {
                "start": 285,
                "end": 287
            },
            "context": {
                "type": "variable",
                "name": "wcag-light",
                "value": "white",
                "scope": "default",
                "line": {
                    "start": 288,
                    "end": 288
                }
            },
            "type": "Color",
            "group": [
                "accessibility"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "resolvedValue": "white",
            "resolvedType": "Color"
        },
        {
            "description": "The color white.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 3,
                "end": 6
            },
            "context": {
                "type": "variable",
                "name": "kendo-color-white",
                "value": "#ffffff",
                "scope": "private",
                "line": {
                    "start": 7,
                    "end": 7
                }
            },
            "type": "Color",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "#ffffff",
            "resolvedType": "Color"
        },
        {
            "description": "The color black.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 9,
                "end": 12
            },
            "context": {
                "type": "variable",
                "name": "kendo-color-black",
                "value": "#000000",
                "scope": "private",
                "line": {
                    "start": 13,
                    "end": 13
                }
            },
            "type": "Color",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "#000000",
            "resolvedType": "Color"
        },
        {
            "description": "The color transparent.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 15,
                "end": 18
            },
            "context": {
                "type": "variable",
                "name": "kendo-color-rgba-transparent",
                "value": "rgba(0, 0, 0, 0)",
                "scope": "private",
                "line": {
                    "start": 19,
                    "end": 19
                }
            },
            "type": "Color",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "rgba(0, 0, 0, 0)",
            "resolvedType": "Color"
        },
        {
            "description": "A gradient that goes from transparent to black.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 21,
                "end": 24
            },
            "context": {
                "type": "variable",
                "name": "kendo-gradient-transparent-to-black",
                "value": "rgba(black, 0), black",
                "scope": "private",
                "line": {
                    "start": 25,
                    "end": 25
                }
            },
            "type": "Gradient",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "rgba(0, 0, 0, 0), black",
            "resolvedType": "Gradient"
        },
        {
            "description": "A gradient that goes from transparent to white.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 27,
                "end": 30
            },
            "context": {
                "type": "variable",
                "name": "kendo-gradient-transparent-to-white",
                "value": "rgba(white, 0), white",
                "scope": "private",
                "line": {
                    "start": 31,
                    "end": 31
                }
            },
            "type": "Gradient",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "rgba(255, 255, 255, 0), white",
            "resolvedType": "Gradient"
        },
        {
            "description": "A gradient that goes from black to transparent.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 33,
                "end": 36
            },
            "context": {
                "type": "variable",
                "name": "kendo-gradient-black-to-transparent",
                "value": "black, rgba(black, 0)",
                "scope": "private",
                "line": {
                    "start": 37,
                    "end": 37
                }
            },
            "type": "Gradient",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "black, rgba(0, 0, 0, 0)",
            "resolvedType": "Gradient"
        },
        {
            "description": "A gradient that goes from white to transparent.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 39,
                "end": 42
            },
            "context": {
                "type": "variable",
                "name": "kendo-gradient-white-to-transparent",
                "value": "white, rgba(white, 0)",
                "scope": "private",
                "line": {
                    "start": 43,
                    "end": 43
                }
            },
            "type": "Gradient",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "white, rgba(255, 255, 255, 0)",
            "resolvedType": "Gradient"
        },
        {
            "description": "A gradient that cycles through the colors of the rainbow.\nNote: you cannot change this value.\n",
            "commentRange": {
                "start": 45,
                "end": 48
            },
            "context": {
                "type": "variable",
                "name": "kendo-gradient-rainbow",
                "value": "#ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000",
                "scope": "private",
                "line": {
                    "start": 49,
                    "end": 49
                }
            },
            "type": "Gradient",
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_constants.scss",
                "name": "_constants.scss"
            },
            "resolvedValue": "#ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000",
            "resolvedType": "Gradient"
        },
        {
            "description": "The global default Colors map.\n",
            "commentRange": {
                "start": 175,
                "end": 176
            },
            "context": {
                "type": "variable",
                "name": "kendo-colors",
                "value": "$_default-colors",
                "scope": "default",
                "line": {
                    "start": 177,
                    "end": 177
                }
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/color-system/_swatch.scss",
                "name": "_swatch.scss"
            },
            "usedBy": [
                {
                    "description": "Takes a color name from the $kendo-colors map as a parameter\nand returns a CSS variable with the actual color as a fallback\n",
                    "context": {
                        "type": "function",
                        "name": "k-color",
                        "code": "\n    $_color: k-map-get($kendo-colors, $key);\n\n    @if ($_color) {\n        @return var(--kendo-color-#{$key}, $_color);\n    } @else {\n        @error \"Color Variable \\`#{$key}\\` does not exists in the color collection.\";\n    }\n",
                        "line": {
                            "start": 130,
                            "end": 138
                        },
                        "signature": "k-color($key)"
                    }
                }
            ],
            "resolvedValue": "(app-surface: #ffffff, on-app-surface: #3d3d3d, subtle: #666666, surface: #fafafa, surface-alt: #ffffff, border: rgba(0, 0, 0, 0.08), border-alt: rgba(0, 0, 0, 0.16), base-subtle: #ebebeb, base-subtle-hover: #e0e0e0, base-subtle-active: #d6d6d6, base: #f5f5f5, base-hover: #ebebeb, base-active: #d6d6d6, base-emphasis: #c2c2c2, base-on-subtle: #3d3d3d, on-base: #3d3d3d, base-on-surface: #3d3d3d, primary-subtle: #ffeceb, primary-subtle-hover: #ffdedb, primary-subtle-active: #ffc8c4, primary: #ff6358, primary-hover: #ea5a51, primary-active: #d45349, primary-emphasis: #ff9d97, primary-on-subtle: #5c201c, on-primary: #ffffff, primary-on-surface: #ff6358, secondary-subtle: #fafafa, secondary-subtle-hover: #f5f5f5, secondary-subtle-active: #ebebeb, secondary: #666666, secondary-hover: #525252, secondary-active: #3d3d3d, secondary-emphasis: #e0e0e0, secondary-on-subtle: #141414, on-secondary: #ffffff, secondary-on-surface: #292929, tertiary-subtle: #d8f1fd, tertiary-subtle-hover: #c5eafc, tertiary-subtle-active: #a3dffb, tertiary: #03a9f4, tertiary-hover: #039ae0, tertiary-active: #028ccb, tertiary-emphasis: #61c9f9, tertiary-on-subtle: #023f5c, on-tertiary: #ffffff, tertiary-on-surface: #028ccb, info-subtle: #d2e2fb, info-subtle-hover: #bdd4f8, info-subtle-active: #80acf4, info: #0058e9, info-hover: #0052d6, info-active: #004ac2, info-emphasis: #6098f2, info-on-subtle: #002259, on-info: #ffffff, info-on-surface: #004ac2, success-subtle: #dcf0d3, success-subtle-hover: #cbe9bf, success-subtle-active: #b7e1a5, success: #37b400, success-hover: #32a500, success-active: #2d9600, success-emphasis: #81d15f, success-on-subtle: #1c5a00, on-success: #ffffff, success-on-surface: #2d9600, warning-subtle: #fff4d3, warning-subtle-hover: #ffeebd, warning-subtle-active: #ffe79e, warning: #ffc000, warning-hover: #eaaf00, warning-active: #d49f00, warning-emphasis: #ffd760, warning-on-subtle: #5e4700, on-warning: #3d3d3d, warning-on-surface: #ffc000, error-subtle: #fcddda, error-subtle-hover: #fbc8c3, error-subtle-active: #f98b80, error: #f31700, error-hover: #df1600, error-active: #ca1400, error-emphasis: #f76f60, error-on-subtle: #7a0c00, on-error: #ffffff, error-on-surface: #ca1400, light-subtle: #fafafa, light-subtle-hover: #f5f5f5, light-subtle-active: #ebebeb, light: #ebebeb, light-hover: #e0e0e0, light-active: #d6d6d6, light-emphasis: #d6d6d6, light-on-subtle: #141414, on-light: #000000, light-on-surface: #e0e0e0, dark-subtle: #c2c2c2, dark-subtle-hover: #adadad, dark-subtle-active: #999999, dark: #3d3d3d, dark-hover: #292929, dark-active: #1f1f1f, dark-emphasis: #666666, dark-on-subtle: #1f1f1f, on-dark: #ffffff, dark-on-surface: #141414, inverse-subtle: #c2c2c2, inverse-subtle-hover: #adadad, inverse-subtle-active: #999999, inverse: #3d3d3d, inverse-hover: #292929, inverse-active: #1f1f1f, inverse-emphasis: #666666, inverse-on-subtle: #1f1f1f, on-inverse: #ffffff, inverse-on-surface: #141414, series-a: #ff6358, series-a-bold: #bf4a42, series-a-bolder: #80322c, series-a-subtle: #ffb1ac, series-a-subtler: #ff8a82, series-b: #ffe162, series-b-bold: #bfa94a, series-b-bolder: #807131, series-b-subtle: #fff0b1, series-b-subtler: #ffe989, series-c: #4cd180, series-c-bold: #399d60, series-c-bolder: #266940, series-c-subtle: #a6e8c0, series-c-subtler: #79dda0, series-d: #4b5ffa, series-d-bold: #3847bc, series-d-bolder: #26307d, series-d-subtle: #a5affd, series-d-subtler: #7887fb, series-e: #ac58ff, series-e-bold: #8142bf, series-e-bolder: #562c80, series-e-subtle: #d6acff, series-e-subtler: #c182ff, series-f: #ff5892, series-f-bold: #bf426e, series-f-bolder: #802c49, series-f-subtle: #ffacc9, series-f-subtler: #ff82ae)",
            "resolvedType": "Map",
            "prettyValue": {
                "app-surface": "#ffffff",
                "on-app-surface": "#3d3d3d",
                "subtle": "#666666",
                "surface": "#fafafa",
                "surface-alt": "#ffffff",
                "border": "rgba(0, 0, 0, 0.08)",
                "border-alt": "rgba(0, 0, 0, 0.16)",
                "base-subtle": "#ebebeb",
                "base-subtle-hover": "#e0e0e0",
                "base-subtle-active": "#d6d6d6",
                "base": "#f5f5f5",
                "base-hover": "#ebebeb",
                "base-active": "#d6d6d6",
                "base-emphasis": "#c2c2c2",
                "base-on-subtle": "#3d3d3d",
                "on-base": "#3d3d3d",
                "base-on-surface": "#3d3d3d",
                "primary-subtle": "#ffeceb",
                "primary-subtle-hover": "#ffdedb",
                "primary-subtle-active": "#ffc8c4",
                "primary": "#ff6358",
                "primary-hover": "#ea5a51",
                "primary-active": "#d45349",
                "primary-emphasis": "#ff9d97",
                "primary-on-subtle": "#5c201c",
                "on-primary": "#ffffff",
                "primary-on-surface": "#ff6358",
                "secondary-subtle": "#fafafa",
                "secondary-subtle-hover": "#f5f5f5",
                "secondary-subtle-active": "#ebebeb",
                "secondary": "#666666",
                "secondary-hover": "#525252",
                "secondary-active": "#3d3d3d",
                "secondary-emphasis": "#e0e0e0",
                "secondary-on-subtle": "#141414",
                "on-secondary": "#ffffff",
                "secondary-on-surface": "#292929",
                "tertiary-subtle": "#d8f1fd",
                "tertiary-subtle-hover": "#c5eafc",
                "tertiary-subtle-active": "#a3dffb",
                "tertiary": "#03a9f4",
                "tertiary-hover": "#039ae0",
                "tertiary-active": "#028ccb",
                "tertiary-emphasis": "#61c9f9",
                "tertiary-on-subtle": "#023f5c",
                "on-tertiary": "#ffffff",
                "tertiary-on-surface": "#028ccb",
                "info-subtle": "#d2e2fb",
                "info-subtle-hover": "#bdd4f8",
                "info-subtle-active": "#80acf4",
                "info": "#0058e9",
                "info-hover": "#0052d6",
                "info-active": "#004ac2",
                "info-emphasis": "#6098f2",
                "info-on-subtle": "#002259",
                "on-info": "#ffffff",
                "info-on-surface": "#004ac2",
                "success-subtle": "#dcf0d3",
                "success-subtle-hover": "#cbe9bf",
                "success-subtle-active": "#b7e1a5",
                "success": "#37b400",
                "success-hover": "#32a500",
                "success-active": "#2d9600",
                "success-emphasis": "#81d15f",
                "success-on-subtle": "#1c5a00",
                "on-success": "#ffffff",
                "success-on-surface": "#2d9600",
                "warning-subtle": "#fff4d3",
                "warning-subtle-hover": "#ffeebd",
                "warning-subtle-active": "#ffe79e",
                "warning": "#ffc000",
                "warning-hover": "#eaaf00",
                "warning-active": "#d49f00",
                "warning-emphasis": "#ffd760",
                "warning-on-subtle": "#5e4700",
                "on-warning": "#3d3d3d",
                "warning-on-surface": "#ffc000",
                "error-subtle": "#fcddda",
                "error-subtle-hover": "#fbc8c3",
                "error-subtle-active": "#f98b80",
                "error": "#f31700",
                "error-hover": "#df1600",
                "error-active": "#ca1400",
                "error-emphasis": "#f76f60",
                "error-on-subtle": "#7a0c00",
                "on-error": "#ffffff",
                "error-on-surface": "#ca1400",
                "light-subtle": "#fafafa",
                "light-subtle-hover": "#f5f5f5",
                "light-subtle-active": "#ebebeb",
                "light": "#ebebeb",
                "light-hover": "#e0e0e0",
                "light-active": "#d6d6d6",
                "light-emphasis": "#d6d6d6",
                "light-on-subtle": "#141414",
                "on-light": "#000000",
                "light-on-surface": "#e0e0e0",
                "dark-subtle": "#c2c2c2",
                "dark-subtle-hover": "#adadad",
                "dark-subtle-active": "#999999",
                "dark": "#3d3d3d",
                "dark-hover": "#292929",
                "dark-active": "#1f1f1f",
                "dark-emphasis": "#666666",
                "dark-on-subtle": "#1f1f1f",
                "on-dark": "#ffffff",
                "dark-on-surface": "#141414",
                "inverse-subtle": "#c2c2c2",
                "inverse-subtle-hover": "#adadad",
                "inverse-subtle-active": "#999999",
                "inverse": "#3d3d3d",
                "inverse-hover": "#292929",
                "inverse-active": "#1f1f1f",
                "inverse-emphasis": "#666666",
                "inverse-on-subtle": "#1f1f1f",
                "on-inverse": "#ffffff",
                "inverse-on-surface": "#141414",
                "series-a": "#ff6358",
                "series-a-bold": "#bf4a42",
                "series-a-bolder": "#80322c",
                "series-a-subtle": "#ffb1ac",
                "series-a-subtler": "#ff8a82",
                "series-b": "#ffe162",
                "series-b-bold": "#bfa94a",
                "series-b-bolder": "#807131",
                "series-b-subtle": "#fff0b1",
                "series-b-subtler": "#ffe989",
                "series-c": "#4cd180",
                "series-c-bold": "#399d60",
                "series-c-bolder": "#266940",
                "series-c-subtle": "#a6e8c0",
                "series-c-subtler": "#79dda0",
                "series-d": "#4b5ffa",
                "series-d-bold": "#3847bc",
                "series-d-bolder": "#26307d",
                "series-d-subtle": "#a5affd",
                "series-d-subtler": "#7887fb",
                "series-e": "#ac58ff",
                "series-e-bold": "#8142bf",
                "series-e-bolder": "#562c80",
                "series-e-subtle": "#d6acff",
                "series-e-subtler": "#c182ff",
                "series-f": "#ff5892",
                "series-f-bold": "#bf426e",
                "series-f-bolder": "#802c49",
                "series-f-subtle": "#ffacc9",
                "series-f-subtler": "#ff82ae"
            }
        },
        {
            "description": "The global default Elevation map.\n",
            "commentRange": {
                "start": 42,
                "end": 43
            },
            "context": {
                "type": "variable",
                "name": "kendo-elevation",
                "value": "$_default-elevation",
                "scope": "default",
                "line": {
                    "start": 44,
                    "end": 44
                }
            },
            "group": [
                "elevation"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/elevation/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(1: (0 2px 3px rgba(0, 0, 0, 0.04), 0 4px 16px rgba(0, 0, 0, 0.12)), 2: (0 4px 6px rgba(0, 0, 0, 0.06), 0 4px 16px rgba(0, 0, 0, 0.12)), 3: (0 6px 8px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.12)), 4: (0 8px 10px rgba(0, 0, 0, 0.12), 0 4px 16px rgba(0, 0, 0, 0.12)), 5: (0 10px 12px rgba(0, 0, 0, 0.16), 0 4px 16px rgba(0, 0, 0, 0.12)), 6: (0 12px 14px rgba(0, 0, 0, 0.2), 0 4px 16px rgba(0, 0, 0, 0.12)), 7: (0 14px 16px rgba(0, 0, 0, 0.24), 0 4px 16px rgba(0, 0, 0, 0.12)), 8: (0 16px 18px rgba(0, 0, 0, 0.28), 0 4px 16px rgba(0, 0, 0, 0.12)), 9: (0 32px 34px rgba(0, 0, 0, 0.32), 0 4px 16px rgba(0, 0, 0, 0.12)))",
            "resolvedType": "Map",
            "prettyValue": {
                "1": "0 2px 3px rgba(0, 0, 0, 0.04), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "2": "0 4px 6px rgba(0, 0, 0, 0.06), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "3": "0 6px 8px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "4": "0 8px 10px rgba(0, 0, 0, 0.12), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "5": "0 10px 12px rgba(0, 0, 0, 0.16), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "6": "0 12px 14px rgba(0, 0, 0, 0.2), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "7": "0 14px 16px rgba(0, 0, 0, 0.24), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "8": "0 16px 18px rgba(0, 0, 0, 0.28), 0 4px 16px rgba(0, 0, 0, 0.12)",
                "9": "0 32px 34px rgba(0, 0, 0, 0.32), 0 4px 16px rgba(0, 0, 0, 0.12)"
            }
        },
        {
            "description": "The none border radius used across the Components.\n",
            "commentRange": {
                "start": 1,
                "end": 2
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-none",
                "value": "k-map-get($kendo-spacing, 0)",
                "scope": "default",
                "line": {
                    "start": 3,
                    "end": 3
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0px",
            "resolvedType": "Number"
        },
        {
            "description": "The extra small border radius used across the Components.\n",
            "commentRange": {
                "start": 4,
                "end": 5
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-xs",
                "value": "k-map-get($kendo-spacing, 1px)",
                "scope": "default",
                "line": {
                    "start": 6,
                    "end": 6
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1px",
            "resolvedType": "Number"
        },
        {
            "description": "The small border radius used across the Components.\n",
            "commentRange": {
                "start": 7,
                "end": 8
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-sm",
                "value": "k-map-get($kendo-spacing, 0.5)",
                "scope": "default",
                "line": {
                    "start": 9,
                    "end": 9
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.125rem",
            "resolvedType": "Number"
        },
        {
            "description": "The medium border radius used across the Components.\n",
            "commentRange": {
                "start": 10,
                "end": 11
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-md",
                "value": "k-map-get($kendo-spacing, 1)",
                "scope": "default",
                "line": {
                    "start": 12,
                    "end": 12
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.25rem",
            "resolvedType": "Number"
        },
        {
            "description": "The large border radius used across the Components.\n",
            "commentRange": {
                "start": 13,
                "end": 14
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-lg",
                "value": "k-map-get($kendo-spacing, 1.5)",
                "scope": "default",
                "line": {
                    "start": 15,
                    "end": 15
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.375rem",
            "resolvedType": "Number"
        },
        {
            "description": "The extra large border radius used across the Components.\n",
            "commentRange": {
                "start": 16,
                "end": 17
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-xl",
                "value": "k-map-get($kendo-spacing, 2)",
                "scope": "default",
                "line": {
                    "start": 18,
                    "end": 18
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.5rem",
            "resolvedType": "Number"
        },
        {
            "description": "The third largest border radius used across the Components.\n",
            "commentRange": {
                "start": 19,
                "end": 20
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-xxl",
                "value": "k-map-get($kendo-spacing, 3)",
                "scope": "default",
                "line": {
                    "start": 21,
                    "end": 21
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.75rem",
            "resolvedType": "Number"
        },
        {
            "description": "The second largest border radius used across the Components.\n",
            "commentRange": {
                "start": 22,
                "end": 23
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-xxxl",
                "value": "k-map-get($kendo-spacing, 4)",
                "scope": "default",
                "line": {
                    "start": 24,
                    "end": 24
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1rem",
            "resolvedType": "Number"
        },
        {
            "description": "The largest border radius used across the Components.\n",
            "commentRange": {
                "start": 25,
                "end": 26
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radius-full",
                "value": "9999px",
                "scope": "default",
                "line": {
                    "start": 27,
                    "end": 27
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "9999px",
            "resolvedType": "Number"
        },
        {
            "description": "The global radii Map.\n",
            "commentRange": {
                "start": 45,
                "end": 46
            },
            "context": {
                "type": "variable",
                "name": "kendo-border-radii",
                "value": "k-map-merge($_default-border-radii, $kendo-border-radii)",
                "scope": "private",
                "line": {
                    "start": 47,
                    "end": 47
                }
            },
            "group": [
                "radii"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/border-radii/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(none: 0px, xs: 1px, sm: 0.125rem, md: 0.25rem, lg: 0.375rem, xl: 0.5rem, xxl: 0.75rem, xxxl: 1rem, full: 9999px)",
            "resolvedType": "Map",
            "prettyValue": {
                "none": "0px",
                "xs": "1px",
                "sm": "0.125rem",
                "md": "0.25rem",
                "lg": "0.375rem",
                "xl": "0.5rem",
                "xxl": "0.75rem",
                "xxxl": "1rem",
                "full": "9999px"
            }
        },
        {
            "description": "The global default Spacing map.\n",
            "commentRange": {
                "start": 46,
                "end": 47
            },
            "context": {
                "type": "variable",
                "name": "kendo-spacing",
                "value": "$_default-spacing",
                "scope": "default",
                "line": {
                    "start": 48,
                    "end": 48
                }
            },
            "group": [
                "spacing"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/spacing/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(0: 0px, 1px: 1px, 0.5: 0.125rem, 1: 0.25rem, 1.5: 0.375rem, 2: 0.5rem, 2.5: 0.625rem, 3: 0.75rem, 3.5: 0.875rem, 4: 1rem, 4.5: 1.125rem, 5: 1.25rem, 5.5: 1.375rem, 6: 1.5rem, 6.5: 1.625rem, 7: 1.75rem, 7.5: 1.875rem, 8: 2rem, 9: 2.25rem, 10: 2.5rem, 11: 2.75rem, 12: 3rem, 13: 3.25rem, 14: 3.5rem, 15: 3.75rem, 16: 4rem, 17: 4.25rem, 18: 4.5rem, 19: 4.75rem, 20: 5rem, 21: 5.25rem, 22: 5.5rem, 23: 5.75rem, 24: 6rem, 25: 7rem, 26: 8rem, 27: 9rem, 28: 10rem, 29: 11rem, 30: 12rem)",
            "resolvedType": "Map",
            "prettyValue": {
                "0": "0px",
                "1": "0.25rem",
                "2": "0.5rem",
                "3": "0.75rem",
                "4": "1rem",
                "5": "1.25rem",
                "6": "1.5rem",
                "7": "1.75rem",
                "8": "2rem",
                "9": "2.25rem",
                "10": "2.5rem",
                "11": "2.75rem",
                "12": "3rem",
                "13": "3.25rem",
                "14": "3.5rem",
                "15": "3.75rem",
                "16": "4rem",
                "17": "4.25rem",
                "18": "4.5rem",
                "19": "4.75rem",
                "20": "5rem",
                "21": "5.25rem",
                "22": "5.5rem",
                "23": "5.75rem",
                "24": "6rem",
                "25": "7rem",
                "26": "8rem",
                "27": "9rem",
                "28": "10rem",
                "29": "11rem",
                "30": "12rem",
                "1px": "1px",
                "0.5": "0.125rem",
                "1.5": "0.375rem",
                "2.5": "0.625rem",
                "3.5": "0.875rem",
                "4.5": "1.125rem",
                "5.5": "1.375rem",
                "6.5": "1.625rem",
                "7.5": "1.875rem"
            }
        },
        {
            "description": "The base font size across all components.\n",
            "commentRange": {
                "start": 3,
                "end": 4
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size",
                "value": "0.875rem",
                "scope": "default",
                "line": {
                    "start": 5,
                    "end": 5
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.875rem",
            "resolvedType": "Number"
        },
        {
            "description": "The extra extra small font size across all components.\n",
            "commentRange": {
                "start": 6,
                "end": 7
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size-xxs",
                "value": "0.5rem",
                "scope": "default",
                "line": {
                    "start": 8,
                    "end": 8
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.5rem",
            "resolvedType": "Number"
        },
        {
            "description": "The extra small font size across all components.\n",
            "commentRange": {
                "start": 9,
                "end": 10
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size-xs",
                "value": "0.625rem",
                "scope": "default",
                "line": {
                    "start": 11,
                    "end": 11
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.625rem",
            "resolvedType": "Number"
        },
        {
            "description": "The small font size across all components.\n",
            "commentRange": {
                "start": 12,
                "end": 13
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size-sm",
                "value": "0.75rem",
                "scope": "default",
                "line": {
                    "start": 14,
                    "end": 14
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.75rem",
            "resolvedType": "Number"
        },
        {
            "description": "The medium font size across all components.\n",
            "commentRange": {
                "start": 15,
                "end": 16
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size-md",
                "value": "$kendo-font-size",
                "scope": "default",
                "line": {
                    "start": 17,
                    "end": 17
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.875rem",
            "resolvedType": "Number"
        },
        {
            "description": "The large font size across all components.\n",
            "commentRange": {
                "start": 18,
                "end": 19
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size-lg",
                "value": "1rem",
                "scope": "default",
                "line": {
                    "start": 20,
                    "end": 20
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1rem",
            "resolvedType": "Number"
        },
        {
            "description": "The extra large font size across all components.\n",
            "commentRange": {
                "start": 21,
                "end": 22
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-size-xl",
                "value": "1.25rem",
                "scope": "default",
                "line": {
                    "start": 23,
                    "end": 23
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1.25rem",
            "resolvedType": "Number"
        },
        {
            "description": "The base line height across all components.\n",
            "commentRange": {
                "start": 25,
                "end": 26
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-height",
                "value": "k-math-div( 20, 14 )",
                "scope": "default",
                "line": {
                    "start": 27,
                    "end": 27
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1.4285714286",
            "resolvedType": "Number"
        },
        {
            "description": "The extra small line height across all components.\n",
            "commentRange": {
                "start": 28,
                "end": 29
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-height-xs",
                "value": "1",
                "scope": "default",
                "line": {
                    "start": 30,
                    "end": 30
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1",
            "resolvedType": "Number"
        },
        {
            "description": "The small line height across all components.\n",
            "commentRange": {
                "start": 31,
                "end": 32
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-height-sm",
                "value": "1.25",
                "scope": "default",
                "line": {
                    "start": 33,
                    "end": 33
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1.25",
            "resolvedType": "Number"
        },
        {
            "description": "The medium line height across all components.\n",
            "commentRange": {
                "start": 34,
                "end": 35
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-height-md",
                "value": "$kendo-line-height",
                "scope": "default",
                "line": {
                    "start": 36,
                    "end": 36
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1.4285714286",
            "resolvedType": "Number"
        },
        {
            "description": "The large line height across all components.\n",
            "commentRange": {
                "start": 37,
                "end": 38
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-height-lg",
                "value": "1.5",
                "scope": "default",
                "line": {
                    "start": 39,
                    "end": 39
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "1.5",
            "resolvedType": "Number"
        },
        {
            "description": "The base line height in ems across all components.\n",
            "commentRange": {
                "start": 40,
                "end": 41
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-height-em",
                "value": "calc( #{$kendo-line-height-md} * 1em )",
                "scope": "default",
                "line": {
                    "start": 42,
                    "end": 42
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "calc(1.4285714286 * 1em)",
            "resolvedType": "Calculation"
        },
        {
            "description": "The base font weight across all components.\n",
            "commentRange": {
                "start": 44,
                "end": 45
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight",
                "value": "400",
                "scope": "default",
                "line": {
                    "start": 46,
                    "end": 46
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "400",
            "resolvedType": "Number"
        },
        {
            "description": "The thin font weight across all components.\n",
            "commentRange": {
                "start": 47,
                "end": 48
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-thin",
                "value": "100",
                "scope": "default",
                "line": {
                    "start": 49,
                    "end": 49
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "100",
            "resolvedType": "Number"
        },
        {
            "description": "The extra light font weight across all components.\n",
            "commentRange": {
                "start": 50,
                "end": 51
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-extra-light",
                "value": "200",
                "scope": "default",
                "line": {
                    "start": 52,
                    "end": 52
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "200",
            "resolvedType": "Number"
        },
        {
            "description": "The light font weight across all components.\n",
            "commentRange": {
                "start": 53,
                "end": 54
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-light",
                "value": "300",
                "scope": "default",
                "line": {
                    "start": 55,
                    "end": 55
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "300",
            "resolvedType": "Number"
        },
        {
            "description": "The normal font weight across all components.\n",
            "commentRange": {
                "start": 56,
                "end": 57
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-normal",
                "value": "$kendo-font-weight",
                "scope": "default",
                "line": {
                    "start": 58,
                    "end": 58
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "400",
            "resolvedType": "Number"
        },
        {
            "description": "The medium font weight across all components.\n",
            "commentRange": {
                "start": 59,
                "end": 60
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-medium",
                "value": "500",
                "scope": "default",
                "line": {
                    "start": 61,
                    "end": 61
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "500",
            "resolvedType": "Number"
        },
        {
            "description": "The semibold font weight across all components.\n",
            "commentRange": {
                "start": 62,
                "end": 63
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-semibold",
                "value": "600",
                "scope": "default",
                "line": {
                    "start": 64,
                    "end": 64
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "600",
            "resolvedType": "Number"
        },
        {
            "description": "The bold font weight across all components.\n",
            "commentRange": {
                "start": 65,
                "end": 66
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-bold",
                "value": "700",
                "scope": "default",
                "line": {
                    "start": 67,
                    "end": 67
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "700",
            "resolvedType": "Number"
        },
        {
            "description": "The extra bold font weight across all components.\n",
            "commentRange": {
                "start": 68,
                "end": 69
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-extra-bold",
                "value": "800",
                "scope": "default",
                "line": {
                    "start": 70,
                    "end": 70
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "800",
            "resolvedType": "Number"
        },
        {
            "description": "The most pronounced font weight across all components.\n",
            "commentRange": {
                "start": 71,
                "end": 72
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weight-black",
                "value": "900",
                "scope": "default",
                "line": {
                    "start": 73,
                    "end": 73
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "900",
            "resolvedType": "Number"
        },
        {
            "description": "The base letter spacing across all components.\n",
            "commentRange": {
                "start": 75,
                "end": 76
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing",
                "value": "null",
                "scope": "default",
                "line": {
                    "start": 77,
                    "end": 77
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "null",
            "resolvedType": "Null"
        },
        {
            "description": "The tightest letter spacing across all components.\n",
            "commentRange": {
                "start": 78,
                "end": 79
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-tightest",
                "value": "-.15px",
                "scope": "default",
                "line": {
                    "start": 80,
                    "end": 80
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "-0.15px",
            "resolvedType": "Number"
        },
        {
            "description": "Slightly looser than the tighter letter spacing across all components.\n",
            "commentRange": {
                "start": 81,
                "end": 82
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-tighter",
                "value": "-.10px",
                "scope": "default",
                "line": {
                    "start": 83,
                    "end": 83
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "-0.1px",
            "resolvedType": "Number"
        },
        {
            "description": "Moderately tight letter spacing across all components.\n",
            "commentRange": {
                "start": 84,
                "end": 85
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-tight",
                "value": "-.5px",
                "scope": "default",
                "line": {
                    "start": 86,
                    "end": 86
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "-0.5px",
            "resolvedType": "Number"
        },
        {
            "description": "The normal letter spacing across all components.\n",
            "commentRange": {
                "start": 87,
                "end": 88
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-normal",
                "value": "0px",
                "scope": "default",
                "line": {
                    "start": 89,
                    "end": 89
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0px",
            "resolvedType": "Number"
        },
        {
            "description": "Wide letter spacing across all components.\n",
            "commentRange": {
                "start": 90,
                "end": 91
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-wide",
                "value": ".5px",
                "scope": "default",
                "line": {
                    "start": 92,
                    "end": 92
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.5px",
            "resolvedType": "Number"
        },
        {
            "description": "Slightly wider than the wide letter spacing across all components.\n",
            "commentRange": {
                "start": 93,
                "end": 94
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-wider",
                "value": ".10px",
                "scope": "default",
                "line": {
                    "start": 95,
                    "end": 95
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.1px",
            "resolvedType": "Number"
        },
        {
            "description": "The widest letter spacing across all components.\n",
            "commentRange": {
                "start": 96,
                "end": 97
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacing-widest",
                "value": ".15px",
                "scope": "default",
                "line": {
                    "start": 98,
                    "end": 98
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "0.15px",
            "resolvedType": "Number"
        },
        {
            "description": "The sans font family across all components.\n",
            "commentRange": {
                "start": 100,
                "end": 101
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-family-sans",
                "value": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
                "scope": "default",
                "line": {
                    "start": 102,
                    "end": 102
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
            "resolvedType": "List"
        },
        {
            "description": "The serif font family across all components.\n",
            "commentRange": {
                "start": 103,
                "end": 104
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-family-serif",
                "value": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
                "scope": "default",
                "line": {
                    "start": 105,
                    "end": 105
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
            "resolvedType": "List"
        },
        {
            "description": "The sans-serif font family across all components.\n",
            "commentRange": {
                "start": 106,
                "end": 107
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-family-sans-serif",
                "value": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
                "scope": "default",
                "line": {
                    "start": 108,
                    "end": 108
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
            "resolvedType": "List"
        },
        {
            "description": "The monospace font family across all components.\n",
            "commentRange": {
                "start": 109,
                "end": 110
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-family-monospace",
                "value": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace",
                "scope": "default",
                "line": {
                    "start": 111,
                    "end": 111
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace",
            "resolvedType": "List"
        },
        {
            "description": "The base font family across all components.\n",
            "commentRange": {
                "start": 113,
                "end": 114
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-family",
                "value": "inherit",
                "scope": "default",
                "line": {
                    "start": 115,
                    "end": 115
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "inherit",
            "resolvedType": "String"
        },
        {
            "description": "The font sizes map\n",
            "commentRange": {
                "start": 162,
                "end": 163
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-sizes",
                "value": "k-map-merge( $_default-font-sizes, $kendo-font-sizes )",
                "scope": "private",
                "line": {
                    "start": 164,
                    "end": 164
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(xxs: 0.5rem, xs: 0.625rem, sm: 0.75rem, md: 0.875rem, lg: 1rem, xl: 1.25rem)",
            "resolvedType": "Map",
            "prettyValue": {
                "xxs": "0.5rem",
                "xs": "0.625rem",
                "sm": "0.75rem",
                "md": "0.875rem",
                "lg": "1rem",
                "xl": "1.25rem"
            }
        },
        {
            "description": "The line heights map\n",
            "commentRange": {
                "start": 168,
                "end": 169
            },
            "context": {
                "type": "variable",
                "name": "kendo-line-heights",
                "value": "k-map-merge( $_default-line-heights, $kendo-line-heights )",
                "scope": "private",
                "line": {
                    "start": 170,
                    "end": 170
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(xs: 1, sm: 1.25, md: 1.4285714286, lg: 1.5)",
            "resolvedType": "Map",
            "prettyValue": {
                "xs": 1,
                "sm": 1.25,
                "md": 1.4285714285714286,
                "lg": 1.5
            }
        },
        {
            "description": "The font weights map\n",
            "commentRange": {
                "start": 174,
                "end": 175
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-weights",
                "value": "k-map-merge( $_default-font-weights, $kendo-font-weights )",
                "scope": "private",
                "line": {
                    "start": 176,
                    "end": 176
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(thin: 100, extra-light: 200, light: 300, normal: 400, medium: 500, semibold: 600, bold: 700)",
            "resolvedType": "Map",
            "prettyValue": {
                "thin": 100,
                "extra-light": 200,
                "light": 300,
                "normal": 400,
                "medium": 500,
                "semibold": 600,
                "bold": 700
            }
        },
        {
            "description": "The letter spacings map\n",
            "commentRange": {
                "start": 180,
                "end": 181
            },
            "context": {
                "type": "variable",
                "name": "kendo-letter-spacings",
                "value": "k-map-merge( $_default-letter-spacings, $kendo-letter-spacings )",
                "scope": "private",
                "line": {
                    "start": 182,
                    "end": 182
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(tightest: -0.15px, tighter: -0.1px, tight: -0.5px, normal: 0px, wide: 0.5px, wider: 0.1px, widest: 0.15px)",
            "resolvedType": "Map",
            "prettyValue": {
                "tightest": "-0.15px",
                "tighter": "-0.1px",
                "tight": "-0.5px",
                "normal": "0px",
                "wide": "0.5px",
                "wider": "0.1px",
                "widest": "0.15px"
            }
        },
        {
            "description": "The font families map\n",
            "commentRange": {
                "start": 186,
                "end": 187
            },
            "context": {
                "type": "variable",
                "name": "kendo-font-families",
                "value": "k-map-merge( $_default-font-families, $kendo-font-families )",
                "scope": "private",
                "line": {
                    "start": 188,
                    "end": 188
                }
            },
            "group": [
                "typography"
            ],
            "access": "public",
            "file": {
                "path": "core/scss/typography/index.import.scss",
                "name": "index.import.scss"
            },
            "resolvedValue": "(sans: (Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans), serif: (\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville), sans-serif: (system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"), monospace: (SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace))",
            "resolvedType": "Map",
            "prettyValue": {
                "sans": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
                "serif": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
                "sans-serif": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
                "monospace": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace"
            }
        },
        {
            "description": "The background color of disabled items.\n",
            "commentRange": {
                "start": 41,
                "end": 41
            },
            "context": {
                "type": "variable",
                "name": "kendo-disabled-bg",
                "value": "null",
                "scope": "default",
                "line": {
                    "start": 42,
                    "end": 42
                }
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/color-system/_swatch-legacy.scss",
                "name": "_swatch-legacy.scss"
            },
            "resolvedValue": "null",
            "resolvedType": "Null"
        },
        {
            "description": "The text color of disabled items.\n",
            "commentRange": {
                "start": 43,
                "end": 43
            },
            "context": {
                "type": "variable",
                "name": "kendo-disabled-text",
                "value": "null",
                "scope": "default",
                "line": {
                    "start": 44,
                    "end": 44
                }
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/color-system/_swatch-legacy.scss",
                "name": "_swatch-legacy.scss"
            },
            "resolvedValue": "null",
            "resolvedType": "Null"
        },
        {
            "description": "The border color of disabled items.\n",
            "commentRange": {
                "start": 45,
                "end": 45
            },
            "context": {
                "type": "variable",
                "name": "kendo-disabled-border",
                "value": "null",
                "scope": "default",
                "line": {
                    "start": 46,
                    "end": 46
                }
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/color-system/_swatch-legacy.scss",
                "name": "_swatch-legacy.scss"
            },
            "resolvedValue": "null",
            "resolvedType": "Null"
        },
        {
            "description": "The opacity of disabled items.\n",
            "commentRange": {
                "start": 47,
                "end": 47
            },
            "context": {
                "type": "variable",
                "name": "kendo-disabled-opacity",
                "value": "null",
                "scope": "default",
                "line": {
                    "start": 48,
                    "end": 48
                }
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/color-system/_swatch-legacy.scss",
                "name": "_swatch-legacy.scss"
            },
            "resolvedValue": "null",
            "resolvedType": "Null"
        },
        {
            "description": "The filter of disabled items.\n",
            "commentRange": {
                "start": 49,
                "end": 49
            },
            "context": {
                "type": "variable",
                "name": "kendo-disabled-filter",
                "value": "null",
                "scope": "default",
                "line": {
                    "start": 50,
                    "end": 50
                }
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/color-system/_swatch-legacy.scss",
                "name": "_swatch-legacy.scss"
            },
            "resolvedValue": "null",
            "resolvedType": "Null"
        }
    ],
    "mixins": [
        {
            "description": "Outputs a module once, no matter how many times it is included.\n",
            "commentRange": {
                "start": 5,
                "end": 8
            },
            "context": {
                "type": "mixin",
                "name": "exports",
                "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                "line": {
                    "start": 9,
                    "end": 14
                },
                "signature": "exports($name)"
            },
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-list-index"
                },
                {
                    "type": "function",
                    "name": "k-list-append"
                },
                {
                    "type": "variable",
                    "name": "_kendo-imported-modules",
                    "external": false
                }
            ],
            "content": "",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/mixins/_import-once.scss",
                "name": "_import-once.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "String",
                    "name": "name",
                    "description": "The name of the exported module."
                }
            ]
        }
    ],
    "functions": [
        {
            "description": "Calculate the relative luminance for a color.\n",
            "commentRange": {
                "start": 290,
                "end": 297
            },
            "context": {
                "type": "function",
                "name": "k-color-luminance",
                "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                "line": {
                    "start": 298,
                    "end": 304
                },
                "signature": "k-color-luminance($color)"
            },
            "return": {
                "type": "Number",
                "description": "The relative luminance for the color.\n"
            },
            "group": [
                "accessibility"
            ],
            "link": [
                {
                    "url": "https://www.w3.org/TR/WCAG/#dfn-relative-luminance",
                    "caption": ""
                },
                {
                    "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                    "caption": ""
                }
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-list-nth"
                },
                {
                    "type": "function",
                    "name": "k-color-red"
                },
                {
                    "type": "function",
                    "name": "k-list-nth"
                },
                {
                    "type": "function",
                    "name": "k-color-green"
                },
                {
                    "type": "function",
                    "name": "k-list-nth"
                },
                {
                    "type": "function",
                    "name": "k-color-blue"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculates contrast ratio between two colors\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-contrast-ratio",
                        "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                        "line": {
                            "start": 315,
                            "end": 320
                        },
                        "signature": "k-color-contrast-ratio($background, $foreground)"
                    }
                },
                {
                    "description": "Calculates contrast ratio between two colors\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-contrast-ratio",
                        "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                        "line": {
                            "start": 315,
                            "end": 320
                        },
                        "signature": "k-color-contrast-ratio($background, $foreground)"
                    }
                },
                {
                    "description": "Checks if a color is dark\n",
                    "context": {
                        "type": "function",
                        "name": "k-is-dark",
                        "code": "\n    @return if( k-color-luminance( $color ) < .5, true, false );\n",
                        "line": {
                            "start": 327,
                            "end": 329
                        },
                        "signature": "k-is-dark($color)"
                    }
                },
                {
                    "description": "Checks if a color is light\n",
                    "context": {
                        "type": "function",
                        "name": "k-is-light",
                        "code": "\n    @return if( k-color-luminance( $color ) < .5, false, true );\n",
                        "line": {
                            "start": 336,
                            "end": 338
                        },
                        "signature": "k-is-light($color)"
                    }
                }
            ],
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to calculate the relative luminance for."
                }
            ]
        },
        {
            "description": "Calculates contrast ratio between two colors\n",
            "commentRange": {
                "start": 306,
                "end": 314
            },
            "context": {
                "type": "function",
                "name": "k-color-contrast-ratio",
                "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                "line": {
                    "start": 315,
                    "end": 320
                },
                "signature": "k-color-contrast-ratio($background, $foreground)"
            },
            "return": {
                "type": "Number",
                "description": "The contrast ratio between the two colors\n"
            },
            "group": [
                "accessibility"
            ],
            "link": [
                {
                    "url": "https://www.w3.org/TR/WCAG/#dfn-contrast-ratio",
                    "caption": ""
                },
                {
                    "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                    "caption": ""
                }
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-color-luminance"
                },
                {
                    "type": "function",
                    "name": "k-color-luminance"
                },
                {
                    "type": "function",
                    "name": "k-math-div"
                },
                {
                    "type": "function",
                    "name": "k-math-max"
                },
                {
                    "type": "function",
                    "name": "k-math-min"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculates the contrast ratio between a background color and a foreground color.\nIf the contrast ratio is not high enough, it will return the color with the highest contrast ratio.\n",
                    "context": {
                        "type": "function",
                        "name": "k-contrast-color",
                        "code": "\n    $foregrounds: $light, $dark, #ffffff, #000000;\n    $max-ratio: 0;\n    $max-ratio-color: null;\n\n    @each $color in $foregrounds {\n        $contrast-ratio: k-color-contrast-ratio( $background, $color );\n\n        @if ( $contrast-ratio > $min-ratio ) {\n            @return $color;\n        } @else if ( $contrast-ratio > $max-ratio ) {\n            $max-ratio: $contrast-ratio;\n            $max-ratio-color: $color;\n        }\n    }\n\n    @warn \"Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...\";\n\n    @return $max-ratio-color;\n",
                        "line": {
                            "start": 350,
                            "end": 369
                        },
                        "signature": "k-contrast-color($background, $dark, $light, $min-ratio)"
                    }
                }
            ],
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "background",
                    "description": "The background color"
                },
                {
                    "type": "Color",
                    "name": "foreground",
                    "description": "The foreground color"
                }
            ]
        },
        {
            "description": "Checks if a color is dark\n",
            "commentRange": {
                "start": 322,
                "end": 326
            },
            "context": {
                "type": "function",
                "name": "k-is-dark",
                "code": "\n    @return if( k-color-luminance( $color ) < .5, true, false );\n",
                "line": {
                    "start": 327,
                    "end": 329
                },
                "signature": "k-is-dark($color)"
            },
            "return": {
                "type": "Boolean",
                "description": "True if the color is dark, false otherwise\n"
            },
            "group": [
                "accessibility"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-color-luminance"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to check"
                }
            ]
        },
        {
            "description": "Checks if a color is light\n",
            "commentRange": {
                "start": 331,
                "end": 335
            },
            "context": {
                "type": "function",
                "name": "k-is-light",
                "code": "\n    @return if( k-color-luminance( $color ) < .5, false, true );\n",
                "line": {
                    "start": 336,
                    "end": 338
                },
                "signature": "k-is-light($color)"
            },
            "return": {
                "type": "Boolean",
                "description": "True if the color is light, false otherwise\n"
            },
            "group": [
                "accessibility"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-color-luminance"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to check"
                }
            ]
        },
        {
            "description": "Calculates the contrast ratio between a background color and a foreground color.\nIf the contrast ratio is not high enough, it will return the color with the highest contrast ratio.\n",
            "commentRange": {
                "start": 341,
                "end": 349
            },
            "context": {
                "type": "function",
                "name": "k-contrast-color",
                "code": "\n    $foregrounds: $light, $dark, #ffffff, #000000;\n    $max-ratio: 0;\n    $max-ratio-color: null;\n\n    @each $color in $foregrounds {\n        $contrast-ratio: k-color-contrast-ratio( $background, $color );\n\n        @if ( $contrast-ratio > $min-ratio ) {\n            @return $color;\n        } @else if ( $contrast-ratio > $max-ratio ) {\n            $max-ratio: $contrast-ratio;\n            $max-ratio-color: $color;\n        }\n    }\n\n    @warn \"Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...\";\n\n    @return $max-ratio-color;\n",
                "line": {
                    "start": 350,
                    "end": 369
                },
                "signature": "k-contrast-color($background, $dark, $light, $min-ratio)"
            },
            "return": {
                "type": "Color",
                "description": "The color with the highest contrast ratio\n"
            },
            "group": [
                "accessibility"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-color-contrast-ratio"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-contrast.import.scss",
                "name": "_color-contrast.import.scss"
            },
            "usedBy": [
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                }
            ],
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "background",
                    "description": "The background color"
                },
                {
                    "type": "Color",
                    "name": "dark",
                    "description": "The dark color to use as a fallback"
                },
                {
                    "type": "Color",
                    "name": "light",
                    "description": "The light color to use as a fallback"
                },
                {
                    "type": "Number",
                    "name": "min-ratio",
                    "description": "The minimum contrast ratio to reach"
                }
            ]
        },
        {
            "description": "Makes a color lighter by mixing it with white\n",
            "commentRange": {
                "start": 28,
                "end": 36
            },
            "context": {
                "type": "function",
                "name": "k-color-tint",
                "code": "\n    @return k-color-level( $color, -$level );\n",
                "line": {
                    "start": 37,
                    "end": 39
                },
                "signature": "k-color-tint($color, $level)"
            },
            "return": {
                "type": "Color",
                "description": "The lightened color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "usedBy": [
                {
                    "description": "Shades the color in light themes and tints it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-shade",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                        "line": {
                            "start": 60,
                            "end": 68
                        },
                        "signature": "k-try-shade($color, $level)"
                    }
                },
                {
                    "description": "Tints the color in light themes and shades it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-tint",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                        "line": {
                            "start": 76,
                            "end": 84
                        },
                        "signature": "k-try-tint($color, $level)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-tint( #f00, 1 ); // => #ff1a1a",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to lighten"
                },
                {
                    "type": "Number",
                    "name": "level",
                    "description": "The amount to lighten the color"
                }
            ]
        },
        {
            "description": "Makes a color darker by mixing it with black\n",
            "commentRange": {
                "start": 41,
                "end": 49
            },
            "context": {
                "type": "function",
                "name": "k-color-shade",
                "code": "\n    @return k-color-level( $color, $level );\n",
                "line": {
                    "start": 50,
                    "end": 52
                },
                "signature": "k-color-shade($color, $level)"
            },
            "return": {
                "type": "Color",
                "description": "The darkened color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "usedBy": [
                {
                    "description": "Shades the color in light themes and tints it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-shade",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                        "line": {
                            "start": 60,
                            "end": 68
                        },
                        "signature": "k-try-shade($color, $level)"
                    }
                },
                {
                    "description": "Tints the color in light themes and shades it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-tint",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                        "line": {
                            "start": 76,
                            "end": 84
                        },
                        "signature": "k-try-tint($color, $level)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-shade( #f00, 1 ); // => #e60000",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to darken"
                },
                {
                    "type": "Number",
                    "name": "level",
                    "description": "The amount to darken the color"
                }
            ]
        },
        {
            "description": "Shades the color in light themes and tints it in dark themes\n",
            "commentRange": {
                "start": 54,
                "end": 59
            },
            "context": {
                "type": "function",
                "name": "k-try-shade",
                "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                "line": {
                    "start": 60,
                    "end": 68
                },
                "signature": "k-try-shade($color, $level)"
            },
            "return": {
                "type": "Color",
                "description": "The shaded or tinted color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-variable-exists"
                },
                {
                    "type": "function",
                    "name": "k-color-tint"
                },
                {
                    "type": "function",
                    "name": "k-color-shade"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "usedBy": [
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                }
            ],
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to shade or tint"
                },
                {
                    "type": "Number",
                    "name": "level",
                    "description": "The amount to shade or tint the color"
                }
            ]
        },
        {
            "description": "Tints the color in light themes and shades it in dark themes\n",
            "commentRange": {
                "start": 70,
                "end": 75
            },
            "context": {
                "type": "function",
                "name": "k-try-tint",
                "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                "line": {
                    "start": 76,
                    "end": 84
                },
                "signature": "k-try-tint($color, $level)"
            },
            "return": {
                "type": "Color",
                "description": "The tinted or shaded color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-variable-exists"
                },
                {
                    "type": "function",
                    "name": "k-color-shade"
                },
                {
                    "type": "function",
                    "name": "k-color-tint"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "usedBy": [
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                }
            ],
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to tint or shade"
                },
                {
                    "type": "Number",
                    "name": "level",
                    "description": "The amount to tint or shade the color"
                }
            ]
        },
        {
            "description": "Darkens the color in light themes and lightens it in dark themes\n",
            "commentRange": {
                "start": 86,
                "end": 91
            },
            "context": {
                "type": "function",
                "name": "k-try-darken",
                "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                "line": {
                    "start": 92,
                    "end": 99
                },
                "signature": "k-try-darken($color, $level)"
            },
            "return": {
                "type": "Color",
                "description": "The darkened or lightened color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-variable-exists"
                },
                {
                    "type": "function",
                    "name": "k-color-lighten"
                },
                {
                    "type": "function",
                    "name": "k-color-darken"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to darken or lighten"
                },
                {
                    "type": "Number",
                    "name": "level",
                    "description": "The amount to darken or lighten the color"
                }
            ]
        },
        {
            "description": "Lightens the color in light themes and darkens it in dark themes\n",
            "commentRange": {
                "start": 101,
                "end": 106
            },
            "context": {
                "type": "function",
                "name": "k-try-lighten",
                "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                "line": {
                    "start": 107,
                    "end": 114
                },
                "signature": "k-try-lighten($color, $level)"
            },
            "return": {
                "type": "Color",
                "description": "The lightened or darkened color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-variable-exists"
                },
                {
                    "type": "function",
                    "name": "k-color-darken"
                },
                {
                    "type": "function",
                    "name": "k-color-lighten"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to lighten or darken"
                },
                {
                    "type": "Number",
                    "name": "level",
                    "description": "The amount to lighten or darken the color"
                }
            ]
        },
        {
            "description": "Converts a color with alpha to solid color mixed with a background color\n",
            "commentRange": {
                "start": 116,
                "end": 124
            },
            "context": {
                "type": "function",
                "name": "k-rgba-to-mix",
                "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                "line": {
                    "start": 125,
                    "end": 129
                },
                "signature": "k-rgba-to-mix($color, $bg)"
            },
            "return": {
                "type": "Color",
                "description": "The converted color\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-color-alpha"
                },
                {
                    "type": "function",
                    "name": "k-color-mix"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-manipulation.import.scss",
                "name": "_color-manipulation.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-rgba-to-mix( rgba( #f00, 0.5 ), #fff ); // => #ff8080",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to convert"
                },
                {
                    "type": "Color",
                    "name": "bg",
                    "description": "The background color"
                }
            ]
        },
        {
            "description": "Generates all color variations of a given main color\n",
            "commentRange": {
                "start": 1,
                "end": 7
            },
            "context": {
                "type": "function",
                "name": "k-generate-color-variations",
                "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                "line": {
                    "start": 8,
                    "end": 122
                },
                "signature": "k-generate-color-variations($name, $color, $theme)"
            },
            "return": {
                "type": "Map",
                "description": "A map with the generated keys and values\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-color-mix"
                },
                {
                    "type": "function",
                    "name": "k-color-mix"
                },
                {
                    "type": "function",
                    "name": "k-color-mix"
                },
                {
                    "type": "function",
                    "name": "k-color-mix"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-color-darken"
                },
                {
                    "type": "function",
                    "name": "k-color-darken"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-contrast-color"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-tint"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-try-shade"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                }
            ],
            "file": {
                "path": "core/scss/functions/_color-system.import.scss",
                "name": "_color-system.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "String",
                    "name": "name",
                    "description": "The name of the main color"
                },
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color value to be assigned to the main color"
                },
                {
                    "type": "String",
                    "name": "theme",
                    "description": "The theme the colors will be generated for"
                }
            ]
        },
        {
            "description": "Takes a color name from the $kendo-colors map as a parameter\nand returns a CSS variable with the actual color as a fallback\n",
            "commentRange": {
                "start": 124,
                "end": 129
            },
            "context": {
                "type": "function",
                "name": "k-color",
                "code": "\n    $_color: k-map-get($kendo-colors, $key);\n\n    @if ($_color) {\n        @return var(--kendo-color-#{$key}, $_color);\n    } @else {\n        @error \"Color Variable \\`#{$key}\\` does not exists in the color collection.\";\n    }\n",
                "line": {
                    "start": 130,
                    "end": 138
                },
                "signature": "k-color($key)"
            },
            "return": {
                "type": "String",
                "description": "CSS variable with the actual color as a fallback\n"
            },
            "group": [
                "color-system"
            ],
            "access": "public",
            "require": [
                {
                    "type": "function",
                    "name": "k-map-get"
                },
                {
                    "type": "variable",
                    "name": "kendo-colors"
                }
            ],
            "throw": [
                "Color Variable \\`#{$key}\\` does not exists in the color collection."
            ],
            "file": {
                "path": "core/scss/functions/_color-system.import.scss",
                "name": "_color-system.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "String",
                    "name": "key",
                    "description": "The name of a color/key in the $kendo-colors map"
                }
            ]
        },
        {
            "description": "Returns the alpha channel of a color.\n",
            "commentRange": {
                "start": 1,
                "end": 7
            },
            "context": {
                "type": "function",
                "name": "k-color-alpha",
                "code": "\n    @return alpha( $color );\n",
                "line": {
                    "start": 8,
                    "end": 10
                },
                "signature": "k-color-alpha($color)"
            },
            "return": {
                "type": "Number",
                "description": "The alpha channel of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Converts a color with alpha to solid color mixed with a background color\n",
                    "context": {
                        "type": "function",
                        "name": "k-rgba-to-mix",
                        "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                        "line": {
                            "start": 125,
                            "end": 129
                        },
                        "signature": "k-rgba-to-mix($color, $bg)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-alpha( rgba( 0, 0, 0, 0.5 ) ); // => 0.5\n@debug k-color-alpha( #000 ); // => 1",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the alpha channel for."
                }
            ]
        },
        {
            "description": "Returns the red channel of a color.\n",
            "commentRange": {
                "start": 12,
                "end": 17
            },
            "context": {
                "type": "function",
                "name": "k-color-red",
                "code": "\n    @return red( $color );\n",
                "line": {
                    "start": 18,
                    "end": 20
                },
                "signature": "k-color-red($color)"
            },
            "return": {
                "type": "Number",
                "description": "The red channel of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculate the relative luminance for a color.\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-luminance",
                        "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                        "line": {
                            "start": 298,
                            "end": 304
                        },
                        "signature": "k-color-luminance($color)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-red( #ff0000 ); // => 255",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the red channel for."
                }
            ]
        },
        {
            "description": "Returns the green channel of a color.\n",
            "commentRange": {
                "start": 22,
                "end": 27
            },
            "context": {
                "type": "function",
                "name": "k-color-green",
                "code": "\n    @return green( $color );\n",
                "line": {
                    "start": 28,
                    "end": 30
                },
                "signature": "k-color-green($color)"
            },
            "return": {
                "type": "Number",
                "description": "The green channel of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculate the relative luminance for a color.\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-luminance",
                        "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                        "line": {
                            "start": 298,
                            "end": 304
                        },
                        "signature": "k-color-luminance($color)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-green( #00ff00 ); // => 255",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the green channel for."
                }
            ]
        },
        {
            "description": "Returns the blue channel of a color.\n",
            "commentRange": {
                "start": 32,
                "end": 37
            },
            "context": {
                "type": "function",
                "name": "k-color-blue",
                "code": "\n    @return blue( $color );\n",
                "line": {
                    "start": 38,
                    "end": 40
                },
                "signature": "k-color-blue($color)"
            },
            "return": {
                "type": "Number",
                "description": "The blue channel of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculate the relative luminance for a color.\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-luminance",
                        "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                        "line": {
                            "start": 298,
                            "end": 304
                        },
                        "signature": "k-color-luminance($color)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-blue( #0000ff ); // => 255",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the blue channel for."
                }
            ]
        },
        {
            "description": "Returns the hue of a color.\n",
            "commentRange": {
                "start": 42,
                "end": 47
            },
            "context": {
                "type": "function",
                "name": "k-color-hue",
                "code": "\n    @return hue( $color );\n",
                "line": {
                    "start": 48,
                    "end": 50
                },
                "signature": "k-color-hue($color)"
            },
            "return": {
                "type": "Number",
                "description": "The hue of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-hue( #e1d7d2 ); // => 20deg",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the hue for."
                }
            ]
        },
        {
            "description": "Returns the saturation of a color.\n",
            "commentRange": {
                "start": 52,
                "end": 57
            },
            "context": {
                "type": "function",
                "name": "k-color-saturation",
                "code": "\n    @return saturation( $color );\n",
                "line": {
                    "start": 58,
                    "end": 60
                },
                "signature": "k-color-saturation($color)"
            },
            "return": {
                "type": "Number",
                "description": "The saturation of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-saturation( #e1d7d2 ); // => 20%",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the saturation for."
                }
            ]
        },
        {
            "description": "Returns the lightness of a color.\n",
            "commentRange": {
                "start": 62,
                "end": 67
            },
            "context": {
                "type": "function",
                "name": "k-color-lightness",
                "code": "\n    @return lightness( $color );\n",
                "line": {
                    "start": 68,
                    "end": 70
                },
                "signature": "k-color-lightness($color)"
            },
            "return": {
                "type": "Number",
                "description": "The lightness of the color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-lightness( #e1d7d2 ); // => 80%",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the lightness for."
                }
            ]
        },
        {
            "description": "Returns a color that is a mix of two colors.\n",
            "commentRange": {
                "start": 72,
                "end": 79
            },
            "context": {
                "type": "function",
                "name": "k-color-mix",
                "code": "\n    @return mix( $color1, $color2, $weight );\n",
                "line": {
                    "start": 80,
                    "end": 82
                },
                "signature": "k-color-mix($color1, $color2, $weight)"
            },
            "return": {
                "type": "Color",
                "description": "The mixed color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Converts a color with alpha to solid color mixed with a background color\n",
                    "context": {
                        "type": "function",
                        "name": "k-rgba-to-mix",
                        "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                        "line": {
                            "start": 125,
                            "end": 129
                        },
                        "signature": "k-rgba-to-mix($color, $bg)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-mix( #f00, #00f ); // => #800080",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color1",
                    "description": "The first color."
                },
                {
                    "type": "Color",
                    "name": "color2",
                    "description": "The second color."
                },
                {
                    "type": "Number",
                    "name": "weight",
                    "description": "The weight of the first color in the mix."
                }
            ]
        },
        {
            "description": "Makes a color darker by decreasing its lightness.\n",
            "commentRange": {
                "start": 84,
                "end": 90
            },
            "context": {
                "type": "function",
                "name": "k-color-darken",
                "code": "\n    @return darken( $color, $amount );\n",
                "line": {
                    "start": 91,
                    "end": 93
                },
                "signature": "k-color-darken($color, $amount)"
            },
            "return": {
                "type": "Color",
                "description": "The darkened color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Darkens the color in light themes and lightens it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-darken",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                        "line": {
                            "start": 92,
                            "end": 99
                        },
                        "signature": "k-try-darken($color, $level)"
                    }
                },
                {
                    "description": "Lightens the color in light themes and darkens it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-lighten",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                        "line": {
                            "start": 107,
                            "end": 114
                        },
                        "signature": "k-try-lighten($color, $level)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-darken( #f00, 10% ); // => #e60000",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to darken."
                },
                {
                    "type": "Number",
                    "name": "amount",
                    "description": "The amount to darken the color."
                }
            ]
        },
        {
            "description": "Makes a color lighter by increasing its lightness.\n",
            "commentRange": {
                "start": 95,
                "end": 101
            },
            "context": {
                "type": "function",
                "name": "k-color-lighten",
                "code": "\n    @return lighten( $color, $amount );\n",
                "line": {
                    "start": 102,
                    "end": 104
                },
                "signature": "k-color-lighten($color, $amount)"
            },
            "return": {
                "type": "Color",
                "description": "The lightened color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "usedBy": [
                {
                    "description": "Darkens the color in light themes and lightens it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-darken",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                        "line": {
                            "start": 92,
                            "end": 99
                        },
                        "signature": "k-try-darken($color, $level)"
                    }
                },
                {
                    "description": "Lightens the color in light themes and darkens it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-lighten",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                        "line": {
                            "start": 107,
                            "end": 114
                        },
                        "signature": "k-try-lighten($color, $level)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-lighten( #f00, 10% ); // => #ff1a1a",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to lighten."
                },
                {
                    "type": "Number",
                    "name": "amount",
                    "description": "The amount to lighten the color."
                }
            ]
        },
        {
            "description": "Increases or decreases the hue of a color.\n",
            "commentRange": {
                "start": 106,
                "end": 112
            },
            "context": {
                "type": "function",
                "name": "k-color-adjust-hue",
                "code": "\n    @return adjust-hue( $color, $degrees );\n",
                "line": {
                    "start": 113,
                    "end": 115
                },
                "signature": "k-color-adjust-hue($color, $degrees)"
            },
            "return": {
                "type": "Color",
                "description": "The adjusted color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-adjust-hue( #f00, 10deg ); // => #ff1a00",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to adjust the hue for."
                },
                {
                    "type": "Number",
                    "name": "degrees",
                    "description": "The amount to adjust the hue."
                }
            ]
        },
        {
            "description": "Increases the saturation of a color.\n",
            "commentRange": {
                "start": 117,
                "end": 123
            },
            "context": {
                "type": "function",
                "name": "k-color-saturate",
                "code": "\n    @return saturate( $color, $amount );\n",
                "line": {
                    "start": 124,
                    "end": 126
                },
                "signature": "k-color-saturate($color, $amount)"
            },
            "return": {
                "type": "Color",
                "description": "The saturated color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-saturate( #f00, 10% ); // => #ff3333",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to saturate."
                },
                {
                    "type": "Number",
                    "name": "amount",
                    "description": "The amount to saturate the color."
                }
            ]
        },
        {
            "description": "Decreases the saturation of a color.\n",
            "commentRange": {
                "start": 128,
                "end": 134
            },
            "context": {
                "type": "function",
                "name": "k-color-desaturate",
                "code": "\n    @return desaturate( $color, $amount );\n",
                "line": {
                    "start": 135,
                    "end": 137
                },
                "signature": "k-color-desaturate($color, $amount)"
            },
            "return": {
                "type": "Color",
                "description": "The desaturated color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-desaturate( #f00, 10% ); // => #e60000",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to desaturate."
                },
                {
                    "type": "Number",
                    "name": "amount",
                    "description": "The amount to desaturate the color."
                }
            ]
        },
        {
            "description": "Returns a gray color with the same lightness as the input color.\n",
            "commentRange": {
                "start": 139,
                "end": 144
            },
            "context": {
                "type": "function",
                "name": "k-color-grayscale",
                "code": "\n    @return grayscale( $color );\n",
                "line": {
                    "start": 145,
                    "end": 147
                },
                "signature": "k-color-grayscale($color)"
            },
            "return": {
                "type": "Color",
                "description": "The grayscale color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-grayscale( #f00 ); // => #808080",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to convert to grayscale."
                }
            ]
        },
        {
            "description": "Returns the RGB complement of a color. This identical to adjusting the hue\nby 180 degrees.\n",
            "commentRange": {
                "start": 149,
                "end": 155
            },
            "context": {
                "type": "function",
                "name": "k-color-complement",
                "code": "\n    @return complement( $color );\n",
                "line": {
                    "start": 156,
                    "end": 158
                },
                "signature": "k-color-complement($color)"
            },
            "return": {
                "type": "Color",
                "description": "The complement color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-complement( #f00 ); // => #00ffff",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to get the complement for."
                }
            ]
        },
        {
            "description": "Returns the inverse of a color.\n",
            "commentRange": {
                "start": 160,
                "end": 165
            },
            "context": {
                "type": "function",
                "name": "k-color-invert",
                "code": "\n    @return invert( $color );\n",
                "line": {
                    "start": 166,
                    "end": 168
                },
                "signature": "k-color-invert($color)"
            },
            "return": {
                "type": "Color",
                "description": "The inverted color.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_color.import.scss",
                "name": "_color.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-color-invert( #f00 ); // => #00ffff",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Color",
                    "name": "color",
                    "description": "The color to invert."
                }
            ]
        },
        {
            "description": "Escapes SVG characters in a string\n",
            "commentRange": {
                "start": 10,
                "end": 14
            },
            "context": {
                "type": "function",
                "name": "k-escape-svg",
                "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                "line": {
                    "start": 15,
                    "end": 28
                },
                "signature": "k-escape-svg($string)"
            },
            "return": {
                "type": "String",
                "description": "The escaped string\n"
            },
            "link": [
                {
                    "url": "https://codepen.io/kevinweber/pen/dXWoRw",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-string-replace"
                },
                {
                    "type": "function",
                    "name": "k-string-slice"
                },
                {
                    "type": "function",
                    "name": "k-string-replace"
                }
            ],
            "file": {
                "path": "core/scss/functions/_escape-string.import.scss",
                "name": "_escape-string.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to escape"
                }
            ]
        },
        {
            "description": "Escapes special characters in a class name\n",
            "commentRange": {
                "start": 37,
                "end": 39
            },
            "context": {
                "type": "function",
                "name": "k-escape-class-name",
                "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                "line": {
                    "start": 40,
                    "end": 48
                },
                "signature": "k-escape-class-name($text)"
            },
            "return": {
                "type": "String",
                "description": "The escaped string"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-string-replace"
                },
                {
                    "type": "function",
                    "name": "k-string-unquote"
                },
                {
                    "type": "function",
                    "name": "k-string-unquote"
                }
            ],
            "file": {
                "path": "core/scss/functions/_escape-string.import.scss",
                "name": "_escape-string.import.scss"
            },
            "examples": [],
            "parameters": [
                {
                    "type": "String",
                    "name": "text",
                    "description": "The string to escape"
                }
            ]
        },
        {
            "description": "Returns the value of a variable if it is not null,\notherwise returns the fallback value.\n",
            "commentRange": {
                "start": 1,
                "end": 11
            },
            "context": {
                "type": "function",
                "name": "k-if-var",
                "code": "\n    @return if( $var != null, $var, $fallback );\n",
                "line": {
                    "start": 12,
                    "end": 14
                },
                "signature": "k-if-var($var, $fallback)"
            },
            "return": {
                "type": "Any",
                "description": "The value of the variable or the fallback value.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_lang.import.scss",
                "name": "_lang.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "$foo: null;\n@debug k-if-var( $foo, \"bar\" ); // => \"bar\"\n$foo: \"baz\";\n@debug k-if-var( $foo, \"bar\" ); // => \"baz\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "var",
                    "description": "The variable to check."
                },
                {
                    "type": "Any",
                    "name": "fallback",
                    "description": "The fallback value."
                }
            ]
        },
        {
            "description": "Returns a copy of `$list` with `$val` appended to the end.\n",
            "commentRange": {
                "start": 1,
                "end": 8
            },
            "context": {
                "type": "function",
                "name": "k-list-append",
                "code": "\n    @return append( $list, $val, $separator );\n",
                "line": {
                    "start": 9,
                    "end": 11
                },
                "signature": "k-list-append($list, $val, $separator)"
            },
            "return": {
                "type": "List",
                "description": "A copy of `$list` with `$val` appended to the end.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "usedBy": [
                {
                    "description": "Reverse the order of items in `$list`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-list-reverse",
                        "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                        "line": {
                            "start": 88,
                            "end": 103
                        },
                        "signature": "k-list-reverse($list)"
                    }
                },
                {
                    "description": "Outputs a module once, no matter how many times it is included.\n",
                    "context": {
                        "type": "mixin",
                        "name": "exports",
                        "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                        "line": {
                            "start": 9,
                            "end": 14
                        },
                        "signature": "exports($name)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-append( ( \"foo\", \"bar\" ), \"baz\" ); // => \"foo, bar, baz\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to process."
                },
                {
                    "type": "Any",
                    "name": "val",
                    "description": "The value to append to `$list`."
                },
                {
                    "type": "String",
                    "name": "separator",
                    "description": "The separator to use between `$list` and `$val`."
                }
            ]
        },
        {
            "description": "Checks whether `$list` contains `$value`.\n",
            "commentRange": {
                "start": 13,
                "end": 20
            },
            "context": {
                "type": "function",
                "name": "k-list-includes",
                "code": "\n    @return k-list-index( $list, $value ) != null;\n",
                "line": {
                    "start": 21,
                    "end": 23
                },
                "signature": "k-list-includes($list, $value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$list` contains `$value`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-list-index"
                }
            ],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-includes( ( \"foo\", \"bar\" ), \"foo\" ); // => true\n@debug k-list-includes( ( \"foo\", \"bar\" ), \"baz\" ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to check."
                },
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check for."
                }
            ]
        },
        {
            "description": "Returns the index of `$value` in `$list`.\n",
            "commentRange": {
                "start": 25,
                "end": 31
            },
            "context": {
                "type": "function",
                "name": "k-list-index",
                "code": "\n    @return index( $list, $value );\n",
                "line": {
                    "start": 32,
                    "end": 34
                },
                "signature": "k-list-index($list, $value)"
            },
            "return": {
                "type": "Number",
                "description": "The index of `$value` in `$list`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$list` contains `$value`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-list-includes",
                        "code": "\n    @return k-list-index( $list, $value ) != null;\n",
                        "line": {
                            "start": 21,
                            "end": 23
                        },
                        "signature": "k-list-includes($list, $value)"
                    }
                },
                {
                    "description": "Outputs a module once, no matter how many times it is included.\n",
                    "context": {
                        "type": "mixin",
                        "name": "exports",
                        "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                        "line": {
                            "start": 9,
                            "end": 14
                        },
                        "signature": "exports($name)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-index( ( \"foo\", \"bar\" ), \"foo\" ); // => 1",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to check."
                },
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check for."
                }
            ]
        },
        {
            "description": "Returns whether `$list` is bracketed.\n",
            "commentRange": {
                "start": 36,
                "end": 42
            },
            "context": {
                "type": "function",
                "name": "k-list-is-bracketed",
                "code": "\n    @return is-bracketed( $list );\n",
                "line": {
                    "start": 43,
                    "end": 45
                },
                "signature": "k-list-is-bracketed($list)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$list` is bracketed.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-is-bracketed( ( \"foo\", \"bar\" ) ); // => false\n@debug k-list-is-bracketed( [ \"foo\", \"bar\" ] ); // => true",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to check."
                }
            ]
        },
        {
            "description": "Joins two lists together.\n",
            "commentRange": {
                "start": 47,
                "end": 56
            },
            "context": {
                "type": "function",
                "name": "k-list-join",
                "code": "\n    @return join( $list1, $list2, $separator, $bracketed );\n",
                "line": {
                    "start": 57,
                    "end": 59
                },
                "signature": "k-list-join($list1, $list2, $separator, $bracketed)"
            },
            "return": {
                "type": "List",
                "description": "The joined list.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-join( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ) ); // => \"foo, bar, baz, qux\"\n@debug k-list-join( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ), \" \" ); // => \"foo bar baz qux\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list1",
                    "description": "The first list to join."
                },
                {
                    "type": "List",
                    "name": "list2",
                    "description": "The second list to join."
                },
                {
                    "type": "String",
                    "name": "separator",
                    "description": "The separator to use between `$list1` and `$list2`."
                },
                {
                    "type": "Boolean",
                    "name": "bracketed",
                    "description": "Whether the result should be bracketed."
                }
            ]
        },
        {
            "description": "Returns the length of `$list`.\n",
            "commentRange": {
                "start": 61,
                "end": 66
            },
            "context": {
                "type": "function",
                "name": "k-list-length",
                "code": "\n    @return length( $list );\n",
                "line": {
                    "start": 67,
                    "end": 69
                },
                "signature": "k-list-length($list)"
            },
            "return": {
                "type": "Number",
                "description": "The length of `$list`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "usedBy": [
                {
                    "description": "Reverse the order of items in `$list`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-list-reverse",
                        "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                        "line": {
                            "start": 88,
                            "end": 103
                        },
                        "signature": "k-list-reverse($list)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-length( ( \"foo\", \"bar\" ) ); // => 2",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to check."
                }
            ]
        },
        {
            "description": "Returns the nth item in `$list`.\n",
            "commentRange": {
                "start": 71,
                "end": 77
            },
            "context": {
                "type": "function",
                "name": "k-list-nth",
                "code": "\n    @return nth( $list, $n );\n",
                "line": {
                    "start": 78,
                    "end": 80
                },
                "signature": "k-list-nth($list, $n)"
            },
            "return": {
                "type": "Any",
                "description": "The nth item in `$list`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculate the relative luminance for a color.\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-luminance",
                        "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                        "line": {
                            "start": 298,
                            "end": 304
                        },
                        "signature": "k-color-luminance($color)"
                    }
                },
                {
                    "description": "Calculate the relative luminance for a color.\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-luminance",
                        "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                        "line": {
                            "start": 298,
                            "end": 304
                        },
                        "signature": "k-color-luminance($color)"
                    }
                },
                {
                    "description": "Calculate the relative luminance for a color.\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-luminance",
                        "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                        "line": {
                            "start": 298,
                            "end": 304
                        },
                        "signature": "k-color-luminance($color)"
                    }
                },
                {
                    "description": "Reverse the order of items in `$list`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-list-reverse",
                        "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                        "line": {
                            "start": 88,
                            "end": 103
                        },
                        "signature": "k-list-reverse($list)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-nth( ( \"foo\", \"bar\" ), 1 ); // => \"foo\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to check."
                },
                {
                    "type": "Number",
                    "name": "n",
                    "description": "The index of the item to return."
                }
            ]
        },
        {
            "description": "Reverse the order of items in `$list`.\n",
            "commentRange": {
                "start": 82,
                "end": 87
            },
            "context": {
                "type": "function",
                "name": "k-list-reverse",
                "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                "line": {
                    "start": 88,
                    "end": 103
                },
                "signature": "k-list-reverse($list)"
            },
            "return": {
                "type": "List",
                "description": "The reversed list.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-list-length"
                },
                {
                    "type": "function",
                    "name": "k-list-append"
                },
                {
                    "type": "function",
                    "name": "k-list-nth"
                }
            ],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-reverse( ( \"foo\", \"bar\" ) ); // => \"bar, foo\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to reverse."
                }
            ]
        },
        {
            "description": "Returns the separator of `$list`.\n",
            "commentRange": {
                "start": 105,
                "end": 110
            },
            "context": {
                "type": "function",
                "name": "k-list-separator",
                "code": "\n    @return list-separator( $list );\n",
                "line": {
                    "start": 111,
                    "end": 113
                },
                "signature": "k-list-separator($list)"
            },
            "return": {
                "type": "String",
                "description": "The separator of `$list`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-separator( ( \"foo\", \"bar\" ) ); // => \",\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to check."
                }
            ]
        },
        {
            "description": "Returns a copy of `$list` with `$val` inserted at `$n`.\n",
            "commentRange": {
                "start": 115,
                "end": 122
            },
            "context": {
                "type": "function",
                "name": "k-list-set-nth",
                "code": "\n    @return set-nth( $list, $n, $value );\n",
                "line": {
                    "start": 123,
                    "end": 125
                },
                "signature": "k-list-set-nth($list, $n, $val)"
            },
            "return": {
                "type": "List",
                "description": "A copy of `$list` with `$val` inserted at `$n`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-set-nth( ( \"foo\", \"bar\" ), 1, \"baz\" ); // => \"baz, bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list",
                    "description": "The list to process."
                },
                {
                    "type": "Number",
                    "name": "n",
                    "description": "The index at which to insert `$val`."
                },
                {
                    "type": "Any",
                    "name": "val",
                    "description": "The value to insert."
                }
            ]
        },
        {
            "description": "Combines two lists into a single list of two-item lists.\n",
            "commentRange": {
                "start": 127,
                "end": 133
            },
            "context": {
                "type": "function",
                "name": "k-list-zip",
                "code": "\n    @return zip( $lists... );\n",
                "line": {
                    "start": 134,
                    "end": 136
                },
                "signature": "k-list-zip($list1, $list2)"
            },
            "return": {
                "type": "List",
                "description": "A list of two-item lists.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_list.import.scss",
                "name": "_list.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-list-zip( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ) ); // => ((foo, baz), (bar, qux))",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "list1",
                    "description": "The first list to combine."
                },
                {
                    "type": "List",
                    "name": "list2",
                    "description": "The second list to combine."
                }
            ]
        },
        {
            "description": "Returns the value at `$key` in `$map`.\n",
            "commentRange": {
                "start": 1,
                "end": 6
            },
            "context": {
                "type": "function",
                "name": "k-map-get",
                "code": "\n    @each $key in $keys {\n        $map: map-get( $map, $key ); // stylelint-disable-line\n    }\n    @return $map;\n",
                "line": {
                    "start": 7,
                    "end": 12
                },
                "signature": "k-map-get($map, $key)"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "usedBy": [
                {
                    "description": "Takes a color name from the $kendo-colors map as a parameter\nand returns a CSS variable with the actual color as a fallback\n",
                    "context": {
                        "type": "function",
                        "name": "k-color",
                        "code": "\n    $_color: k-map-get($kendo-colors, $key);\n\n    @if ($_color) {\n        @return var(--kendo-color-#{$key}, $_color);\n    } @else {\n        @error \"Color Variable \\`#{$key}\\` does not exists in the color collection.\";\n    }\n",
                        "line": {
                            "start": 130,
                            "end": 138
                        },
                        "signature": "k-color($key)"
                    }
                },
                {
                    "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-deep-merge",
                        "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                        "line": {
                            "start": 56,
                            "end": 78
                        },
                        "signature": "k-map-deep-merge($maps)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-get( ( \"foo\": \"bar\" ), \"foo\" ); // => \"bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to get the value from."
                },
                {
                    "type": "Any",
                    "name": "key",
                    "description": "The key to get the value for.\n"
                }
            ]
        },
        {
            "description": "Returns whether `$map` has a value at `$key`.\n",
            "commentRange": {
                "start": 14,
                "end": 21
            },
            "context": {
                "type": "function",
                "name": "k-map-has-key",
                "code": "\n    @return map-has-key( $map, $key );\n",
                "line": {
                    "start": 22,
                    "end": 24
                },
                "signature": "k-map-has-key($map, $key)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$map` has a value at `$key`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "usedBy": [
                {
                    "description": "Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.\n",
                    "context": {
                        "type": "mixin",
                        "name": "register-data-uri",
                        "code": "\n    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {\n        @warn \"Attempt to redefine data URI of file `#{$name}`.\";\n    }\n\n    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;\n",
                        "line": {
                            "start": 10,
                            "end": 16
                        }
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-has( ( \"foo\": \"bar\" ), \"foo\" ); // => true\n@debug k-map-has( ( \"foo\": \"bar\" ), \"bar\" ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to check."
                },
                {
                    "type": "Any",
                    "name": "key",
                    "description": "The key to check."
                }
            ]
        },
        {
            "description": "Returns a comma separated list of the keys in `$map`.\n",
            "commentRange": {
                "start": 26,
                "end": 31
            },
            "context": {
                "type": "function",
                "name": "k-map-keys",
                "code": "\n    @return map-keys( $map );\n",
                "line": {
                    "start": 32,
                    "end": 34
                },
                "signature": "k-map-keys($map)"
            },
            "return": {
                "type": "List",
                "description": "A comma separated list of the keys in `$map`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-keys( ( \"foo\": \"bar\", \"baz\": \"qux\" ) ); // => \"foo, baz\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to get the keys from."
                }
            ]
        },
        {
            "description": "Returns a map with the keys and values from `$map` and `$args`.\n",
            "commentRange": {
                "start": 36,
                "end": 42
            },
            "context": {
                "type": "function",
                "name": "k-map-merge",
                "code": "\n    @each $arg in $args {\n        $map: map-merge( $map, $arg ); // stylelint-disable-line\n    }\n    @return $map;\n",
                "line": {
                    "start": 43,
                    "end": 48
                },
                "signature": "k-map-merge($map, $args)"
            },
            "return": {
                "type": "Map",
                "description": "A map with the keys and values from `$map` and `$args`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "usedBy": [
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Generates all color variations of a given main color\n",
                    "context": {
                        "type": "function",
                        "name": "k-generate-color-variations",
                        "code": "\n    $result: ();\n\n    // DataViz\n    @if ( \n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: k-color-mix(black, $color, 25%),\n            #{$name}-bolder: k-color-mix(black, $color, 50%),\n            #{$name}-subtle: k-color-mix(white, $color, 25%),\n            #{$name}-subtler: k-color-mix(white, $color, 50%),\n        );\n\n        $result: k-map-merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: k-map-merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                        "line": {
                            "start": 8,
                            "end": 122
                        },
                        "signature": "k-generate-color-variations($name, $color, $theme)"
                    }
                },
                {
                    "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-deep-merge",
                        "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                        "line": {
                            "start": 56,
                            "end": 78
                        },
                        "signature": "k-map-deep-merge($maps)"
                    }
                },
                {
                    "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-deep-merge",
                        "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                        "line": {
                            "start": 56,
                            "end": 78
                        },
                        "signature": "k-map-deep-merge($maps)"
                    }
                },
                {
                    "description": "Sets a single key and value in `$map`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-set",
                        "code": "\n    @return k-map-merge( $map, ( $key: $value ) );\n",
                        "line": {
                            "start": 99,
                            "end": 101
                        },
                        "signature": "k-map-set($map, $key, $value)"
                    }
                },
                {
                    "description": "Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.\n",
                    "context": {
                        "type": "mixin",
                        "name": "register-data-uri",
                        "code": "\n    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {\n        @warn \"Attempt to redefine data URI of file `#{$name}`.\";\n    }\n\n    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;\n",
                        "line": {
                            "start": 10,
                            "end": 16
                        }
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-merge( ( \"foo\": \"bar\" ), ( \"baz\": \"qux\" ) ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to merge."
                },
                {
                    "type": "Map",
                    "name": "args",
                    "description": "The map to merge into `$map`."
                }
            ]
        },
        {
            "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
            "commentRange": {
                "start": 50,
                "end": 55
            },
            "context": {
                "type": "function",
                "name": "k-map-deep-merge",
                "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                "line": {
                    "start": 56,
                    "end": 78
                },
                "signature": "k-map-deep-merge($maps)"
            },
            "return": {
                "type": "Map",
                "description": "A map with the keys and values from `$map` and `$args`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-map-get"
                },
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                },
                {
                    "type": "function",
                    "name": "k-map-merge"
                }
            ],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-deep-merge( ( \"foo\": (\"bar\": \"baz\", \"baz\": \"qux\" ) ), ( \"foo\": (\"bar\": \"foo\") ) ); // => ( \"foo\": (\"bar\": \"foo\", \"baz\": \"qux\" ))",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "maps",
                    "description": "The maps to deep-merge."
                }
            ]
        },
        {
            "description": "Returns a map with the keys and values from `$map` except for `$keys`.\n",
            "commentRange": {
                "start": 80,
                "end": 86
            },
            "context": {
                "type": "function",
                "name": "k-map-remove",
                "code": "\n    @return map-remove( $map, $keys... );\n",
                "line": {
                    "start": 87,
                    "end": 89
                },
                "signature": "k-map-remove($map, $keys)"
            },
            "return": {
                "type": "Map",
                "description": "A map with the keys and values from `$map` except for `$keys`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-remove( ( \"foo\": \"bar\", \"baz\": \"qux\" ), \"foo\" ); // => ( \"baz\": \"qux\" )",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to remove keys from."
                },
                {
                    "type": "Any",
                    "name": "keys",
                    "description": "The keys to remove from `$map`."
                }
            ]
        },
        {
            "description": "Sets a single key and value in `$map`.\n",
            "commentRange": {
                "start": 91,
                "end": 98
            },
            "context": {
                "type": "function",
                "name": "k-map-set",
                "code": "\n    @return k-map-merge( $map, ( $key: $value ) );\n",
                "line": {
                    "start": 99,
                    "end": 101
                },
                "signature": "k-map-set($map, $key, $value)"
            },
            "return": {
                "type": "Map",
                "description": "A map with the key and value set.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-map-merge"
                }
            ],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "usedBy": [
                {
                    "description": "Returns negative values of a number or numbers in a list.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-negate",
                        "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                        "line": {
                            "start": 119,
                            "end": 135
                        },
                        "signature": "k-map-negate($map)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-set( ( \"foo\": \"bar\" ), \"baz\", \"qux\" ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to set the value in."
                },
                {
                    "type": "Any",
                    "name": "key",
                    "description": "The key to set the value for."
                },
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to set."
                }
            ]
        },
        {
            "description": "Returns a comma separated list of the values in `$map`.\n",
            "commentRange": {
                "start": 103,
                "end": 108
            },
            "context": {
                "type": "function",
                "name": "k-map-values",
                "code": "\n    @return map-values( $map );\n",
                "line": {
                    "start": 109,
                    "end": 111
                },
                "signature": "k-map-values($map)"
            },
            "return": {
                "type": "List",
                "description": "A comma separated list of the values in `$map`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-values( ( \"foo\": \"bar\", \"baz\": \"qux\" ) ); // => \"bar, qux\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to get the values from."
                }
            ]
        },
        {
            "description": "Returns negative values of a number or numbers in a list.\n",
            "commentRange": {
                "start": 113,
                "end": 118
            },
            "context": {
                "type": "function",
                "name": "k-map-negate",
                "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                "line": {
                    "start": 119,
                    "end": 135
                },
                "signature": "k-map-negate($map)"
            },
            "return": {
                "type": "Map",
                "description": "A comma separated list of the values in `$map`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-map-set"
                }
            ],
            "throw": [
                "expected type of #{$map} is map, was #{k-meta-type-of($map)}"
            ],
            "file": {
                "path": "core/scss/functions/_map.import.scss",
                "name": "_map.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-map-negate( ( 0: 0, 1: 1px, 2: 2px ) ); // => (\"-1\": -1px, \"-2\": -2px)",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Map",
                    "name": "map",
                    "description": "The map to get the values from."
                }
            ]
        },
        {
            "description": "Returns the absolute value of a number.\n",
            "commentRange": {
                "start": 1,
                "end": 6
            },
            "context": {
                "type": "function",
                "name": "k-math-abs",
                "code": "\n    @return abs( $number );\n",
                "line": {
                    "start": 7,
                    "end": 9
                },
                "signature": "k-math-abs($number)"
            },
            "return": {
                "type": "Number",
                "description": "The absolute value of `$number`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-abs( -10 ); // => 10",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to get the absolute value of."
                }
            ]
        },
        {
            "description": "Returns the smallest integer greater than or equal to a number.\n",
            "commentRange": {
                "start": 11,
                "end": 16
            },
            "context": {
                "type": "function",
                "name": "k-math-ceil",
                "code": "\n    @return ceil( $number );\n",
                "line": {
                    "start": 17,
                    "end": 19
                },
                "signature": "k-math-ceil($number)"
            },
            "return": {
                "type": "Number",
                "description": "The ceiling of `$number`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-ceil( 10.1 ); // => 11",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to get the ceiling of."
                }
            ]
        },
        {
            "description": "Returns the largest integer less than or equal to a number.\n",
            "commentRange": {
                "start": 21,
                "end": 26
            },
            "context": {
                "type": "function",
                "name": "k-math-floor",
                "code": "\n    @return floor( $number );\n",
                "line": {
                    "start": 27,
                    "end": 29
                },
                "signature": "k-math-floor($number)"
            },
            "return": {
                "type": "Number",
                "description": "The floor of `$number`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-floor( 10.9 ); // => 10",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to get the floor of."
                }
            ]
        },
        {
            "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
            "commentRange": {
                "start": 31,
                "end": 40
            },
            "context": {
                "type": "function",
                "name": "k-math-clamp",
                "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                "line": {
                    "start": 41,
                    "end": 43
                },
                "signature": "k-math-clamp($number, $min, $max)"
            },
            "return": {
                "type": "Number",
                "description": "The clamped number.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-math-max"
                },
                {
                    "type": "function",
                    "name": "k-math-min"
                }
            ],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-clamp( 10, 0, 5 ); // => 5",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to clamp."
                },
                {
                    "type": "Number",
                    "name": "min",
                    "description": "The minimum value."
                },
                {
                    "type": "Number",
                    "name": "max",
                    "description": "The maximum value."
                }
            ]
        },
        {
            "description": "Returns whether two numbers have compatible units.\n",
            "commentRange": {
                "start": 45,
                "end": 52
            },
            "context": {
                "type": "function",
                "name": "k-math-compatible",
                "code": "\n    @return comparable( $a, $b );\n",
                "line": {
                    "start": 53,
                    "end": 55
                },
                "signature": "k-math-compatible($a, $b)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether the numbers have compatible units.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-compatible( 10px, 10px ); // => true\n@debug k-math-compatible( 10px, 10em ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "a",
                    "description": "The first number."
                },
                {
                    "type": "Number",
                    "name": "b",
                    "description": "The second number."
                }
            ]
        },
        {
            "description": "Returns the quotient of two numbers.\n",
            "commentRange": {
                "start": 57,
                "end": 64
            },
            "context": {
                "type": "function",
                "name": "k-math-div",
                "code": "\n    @return ( $a / $b );\n",
                "line": {
                    "start": 65,
                    "end": 67
                },
                "signature": "k-math-div($a, $b)"
            },
            "return": {
                "type": "Number",
                "description": "The quotient of `$a` and `$b`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculates contrast ratio between two colors\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-contrast-ratio",
                        "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                        "line": {
                            "start": 315,
                            "end": 320
                        },
                        "signature": "k-color-contrast-ratio($background, $foreground)"
                    }
                },
                {
                    "description": "Returns the result of raising `$x` to the power of `$n`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-pow",
                        "code": "\n    $ret: 1;\n\n    @if ( $n == 0 ) {\n        @return $ret;\n    }\n\n    @if ( $n > 0 ) {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n        @return $ret;\n    }\n\n    @for $i from $n to 0 {\n        $ret: k-math-div( $ret, $x );\n    }\n    @return $ret;\n\n",
                        "line": {
                            "start": 145,
                            "end": 164
                        },
                        "signature": "k-math-pow($x, $n)"
                    }
                },
                {
                    "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-round",
                        "code": "\n\n    @if ( $precision == 0 ) {\n        @return round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                        "line": {
                            "start": 188,
                            "end": 197
                        },
                        "signature": "k-math-round($number, $precision)"
                    }
                },
                {
                    "description": "Remove the unit from a number.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-strip-unit",
                        "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                        "line": {
                            "start": 215,
                            "end": 221
                        },
                        "signature": "k-math-strip-unit($number)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-div( 10, 2 ); // => 5\n@debug k-math-div( 10px, 2 ); // => 5px",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "a",
                    "description": "The dividend."
                },
                {
                    "type": "Number",
                    "name": "b",
                    "description": "The divisor."
                }
            ]
        },
        {
            "description": "Returns whether `$number` has no units.\n",
            "commentRange": {
                "start": 69,
                "end": 75
            },
            "context": {
                "type": "function",
                "name": "k-math-is-unitless",
                "code": "\n    @return unitless( $number );\n",
                "line": {
                    "start": 76,
                    "end": 78
                },
                "signature": "k-math-is-unitless($number)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$number` has no units.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Remove the unit from a number.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-strip-unit",
                        "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                        "line": {
                            "start": 215,
                            "end": 221
                        },
                        "signature": "k-math-strip-unit($number)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-is-unitless( 10 ); // => true\n@debug k-math-is-unitless( 10px ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to check."
                }
            ]
        },
        {
            "description": "Returns the larger of two numbers.\n",
            "commentRange": {
                "start": 80,
                "end": 87
            },
            "context": {
                "type": "function",
                "name": "k-math-max",
                "code": "\n    @return max( $a, $b );\n",
                "line": {
                    "start": 88,
                    "end": 90
                },
                "signature": "k-math-max($a, $b)"
            },
            "return": {
                "type": "Number",
                "description": "The larger of `$a` and `$b`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculates contrast ratio between two colors\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-contrast-ratio",
                        "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                        "line": {
                            "start": 315,
                            "end": 320
                        },
                        "signature": "k-color-contrast-ratio($background, $foreground)"
                    }
                },
                {
                    "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-clamp",
                        "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                        "line": {
                            "start": 41,
                            "end": 43
                        },
                        "signature": "k-math-clamp($number, $min, $max)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-max( 10, 20 ); // => 20\n@debug k-math-max( 10px, 20px ); // => 20px",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "a",
                    "description": "The first number."
                },
                {
                    "type": "Number",
                    "name": "b",
                    "description": "The second number."
                }
            ]
        },
        {
            "description": "Returns the smaller of two numbers.\n",
            "commentRange": {
                "start": 92,
                "end": 99
            },
            "context": {
                "type": "function",
                "name": "k-math-min",
                "code": "\n    @return min( $a, $b );\n",
                "line": {
                    "start": 100,
                    "end": 102
                },
                "signature": "k-math-min($a, $b)"
            },
            "return": {
                "type": "Number",
                "description": "The smaller of `$a` and `$b`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Calculates contrast ratio between two colors\n",
                    "context": {
                        "type": "function",
                        "name": "k-color-contrast-ratio",
                        "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                        "line": {
                            "start": 315,
                            "end": 320
                        },
                        "signature": "k-color-contrast-ratio($background, $foreground)"
                    }
                },
                {
                    "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-clamp",
                        "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                        "line": {
                            "start": 41,
                            "end": 43
                        },
                        "signature": "k-math-clamp($number, $min, $max)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-min( 10, 20 ); // => 10\n@debug k-math-min( 10px, 20px ); // => 10px",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "a",
                    "description": "The first number."
                },
                {
                    "type": "Number",
                    "name": "b",
                    "description": "The second number."
                }
            ]
        },
        {
            "description": "Returns the remainder of two numbers.\n",
            "commentRange": {
                "start": 104,
                "end": 111
            },
            "context": {
                "type": "function",
                "name": "k-math-mod",
                "code": "\n    @return ( $a % $b );\n",
                "line": {
                    "start": 112,
                    "end": 114
                },
                "signature": "k-math-mod($a, $b)"
            },
            "return": {
                "type": "Number",
                "description": "The remainder of `$a` and `$b`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-mod( 10, 3 ); // => 1\n@debug k-math-mod( 10px, 3 ); // => 1px",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "a",
                    "description": "The dividend."
                },
                {
                    "type": "Number",
                    "name": "b",
                    "description": "The divisor."
                }
            ]
        },
        {
            "description": "Returns the product of two numbers.\n",
            "commentRange": {
                "start": 116,
                "end": 123
            },
            "context": {
                "type": "function",
                "name": "k-math-mul",
                "code": "\n    @return ( $a * $b );\n",
                "line": {
                    "start": 124,
                    "end": 126
                },
                "signature": "k-math-mul($a, $b)"
            },
            "return": {
                "type": "Number",
                "description": "The product of `$a` and `$b`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-mul( 10, 2 ); // => 20\n@debug k-math-mul( 10px, 2 ); // => 20px",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "a",
                    "description": "The first number."
                },
                {
                    "type": "Number",
                    "name": "b",
                    "description": "The second number."
                }
            ]
        },
        {
            "description": "Converts a unitless number to a percentage.\n",
            "commentRange": {
                "start": 128,
                "end": 133
            },
            "context": {
                "type": "function",
                "name": "k-math-percentage",
                "code": "\n    @return percentage( $number );\n",
                "line": {
                    "start": 134,
                    "end": 136
                },
                "signature": "k-math-percentage($number)"
            },
            "return": {
                "type": "Number",
                "description": "The percentage.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-percentage( 0.5 ); // => 50%",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to convert."
                }
            ]
        },
        {
            "description": "Returns the result of raising `$x` to the power of `$n`.\n",
            "commentRange": {
                "start": 138,
                "end": 144
            },
            "context": {
                "type": "function",
                "name": "k-math-pow",
                "code": "\n    $ret: 1;\n\n    @if ( $n == 0 ) {\n        @return $ret;\n    }\n\n    @if ( $n > 0 ) {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n        @return $ret;\n    }\n\n    @for $i from $n to 0 {\n        $ret: k-math-div( $ret, $x );\n    }\n    @return $ret;\n\n",
                "line": {
                    "start": 145,
                    "end": 164
                },
                "signature": "k-math-pow($x, $n)"
            },
            "return": {
                "type": "Number",
                "description": "The result of raising `$x` to the power of `$n`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-math-div"
                }
            ],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-round",
                        "code": "\n\n    @if ( $precision == 0 ) {\n        @return round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                        "line": {
                            "start": 188,
                            "end": 197
                        },
                        "signature": "k-math-round($number, $precision)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-pow( 2, 3 ); // => 8",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "x",
                    "description": "The base."
                },
                {
                    "type": "Number",
                    "name": "n",
                    "description": "The exponent."
                }
            ]
        },
        {
            "description": "Returns a random number between 0 and 1.\n",
            "commentRange": {
                "start": 166,
                "end": 171
            },
            "context": {
                "type": "function",
                "name": "k-math-random",
                "code": "\n    @if ( $limit == null ) { // stylelint-disable-line\n        @return random();\n    }\n\n    @return random( $limit );\n",
                "line": {
                    "start": 172,
                    "end": 178
                },
                "signature": "k-math-random($limit)"
            },
            "return": {
                "type": "Number",
                "description": "A random number between 0 and 1.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-random(); // => 0.123456789",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "limit",
                    "description": "The upper limit of the random number."
                }
            ]
        },
        {
            "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
            "commentRange": {
                "start": 180,
                "end": 187
            },
            "context": {
                "type": "function",
                "name": "k-math-round",
                "code": "\n\n    @if ( $precision == 0 ) {\n        @return round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                "line": {
                    "start": 188,
                    "end": 197
                },
                "signature": "k-math-round($number, $precision)"
            },
            "return": {
                "type": "Number",
                "description": "The rounded number.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-math-pow"
                },
                {
                    "type": "function",
                    "name": "k-math-div"
                }
            ],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a <integer> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-integer",
                        "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                        "line": {
                            "start": 109,
                            "end": 111
                        },
                        "signature": "k-meta-is-integer($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-round( 10.123456789, 3 ); // => 10.123",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to round."
                },
                {
                    "type": "Number",
                    "name": "precision",
                    "description": "The number of decimal places to round to."
                }
            ]
        },
        {
            "description": "Returns a string representation of `$number`'s unit.\n",
            "commentRange": {
                "start": 199,
                "end": 204
            },
            "context": {
                "type": "function",
                "name": "k-math-unit",
                "code": "\n    @return unit( $number );\n",
                "line": {
                    "start": 205,
                    "end": 207
                },
                "signature": "k-math-unit($number)"
            },
            "return": {
                "type": "String",
                "description": "The unit of `$number`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "usedBy": [
                {
                    "description": "Remove the unit from a number.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-strip-unit",
                        "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                        "line": {
                            "start": 215,
                            "end": 221
                        },
                        "signature": "k-math-strip-unit($number)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <time> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-time",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 122,
                            "end": 124
                        },
                        "signature": "k-meta-is-time($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-angle",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 148,
                            "end": 150
                        },
                        "signature": "k-meta-is-angle($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-frequency",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 161,
                            "end": 163
                        },
                        "signature": "k-meta-is-frequency($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-relative-length",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 176,
                            "end": 178
                        },
                        "signature": "k-meta-is-relative-length($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-absolute-length",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 189,
                            "end": 191
                        },
                        "signature": "k-meta-is-absolute-length($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-percentage",
                        "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                        "line": {
                            "start": 202,
                            "end": 204
                        },
                        "signature": "k-meta-is-percentage($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-resolution",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 229,
                            "end": 231
                        },
                        "signature": "k-meta-is-resolution($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-unit( 10px ); // => px",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to get the unit of."
                }
            ]
        },
        {
            "description": "Remove the unit from a number.\n",
            "commentRange": {
                "start": 209,
                "end": 214
            },
            "context": {
                "type": "function",
                "name": "k-math-strip-unit",
                "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                "line": {
                    "start": 215,
                    "end": 221
                },
                "signature": "k-math-strip-unit($number)"
            },
            "return": {
                "type": "Number",
                "description": "The unitless number.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-math-is-unitless"
                },
                {
                    "type": "function",
                    "name": "k-math-div"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_math.import.scss",
                "name": "_math.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-math-strip-unit( 10px ); // => 10",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Number",
                    "name": "number",
                    "description": "The number to remove the unit from."
                }
            ]
        },
        {
            "description": "A wrapper around the `call()` function.\nCalls the function `$function` with the arguments `$args`.\n",
            "commentRange": {
                "start": 3,
                "end": 10
            },
            "context": {
                "type": "function",
                "name": "k-meta-call",
                "code": "\n    @return call( $function, $args... );\n",
                "line": {
                    "start": 11,
                    "end": 13
                },
                "signature": "k-meta-call($function, $args)"
            },
            "return": {
                "type": "Any",
                "description": "The result of calling `$function` with `$args`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-call( k-meta-get-function( \"k-string-replace\" ), \"foo bar\", \"bar\", \"baz\" ); // => \"foo baz\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Function",
                    "name": "function",
                    "description": "The function to call."
                },
                {
                    "type": "List",
                    "name": "args",
                    "description": "The arguments to pass to `$function`."
                }
            ]
        },
        {
            "description": "A wrapper around the `function-exists()` function.\nReturns whether a function with the name `$name` exists.\n",
            "commentRange": {
                "start": 15,
                "end": 21
            },
            "context": {
                "type": "function",
                "name": "k-meta-function-exists",
                "code": "\n    @if $name == \"\" {\n        @return false;\n    }\n\n    @return function-exists( $name );\n",
                "line": {
                    "start": 22,
                    "end": 28
                },
                "signature": "k-meta-function-exists($name)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether a function with the name `$name` exists.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-function-exists( \"k-string-replace\" ); // => true",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "name",
                    "description": "The name of the function to check."
                }
            ]
        },
        {
            "description": "A wrapper around the `get-function()` function.\nReturns the function with the name `$name`.\n",
            "commentRange": {
                "start": 30,
                "end": 38
            },
            "context": {
                "type": "function",
                "name": "k-meta-get-function",
                "code": "\n    @return get-function( $name, $args... );\n",
                "line": {
                    "start": 39,
                    "end": 41
                },
                "signature": "k-meta-get-function($name, $css, $module)"
            },
            "return": {
                "type": "Function",
                "description": "The function with the name `$name`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-get-function( \"k-string-replace\" ); // => Function",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "name",
                    "description": "The name of the function to get."
                },
                {
                    "type": "Boolean",
                    "name": "css",
                    "description": "Whether to return the CSS representation of the function."
                },
                {
                    "type": "Module",
                    "name": "module",
                    "description": "The module to get the function from."
                }
            ]
        },
        {
            "description": "A wrapper around the `inspect()` function.\nReturns a string representation of `$value`.\n",
            "commentRange": {
                "start": 43,
                "end": 49
            },
            "context": {
                "type": "function",
                "name": "k-meta-inspect",
                "code": "\n    @return inspect( $value );\n",
                "line": {
                    "start": 50,
                    "end": 52
                },
                "signature": "k-meta-inspect($value)"
            },
            "return": {
                "type": "String",
                "description": "A string representation of `$value`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-inspect( \"foo bar\" ); // => \"foo bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to inspect."
                }
            ]
        },
        {
            "description": "A wrapper around the `keywords()` function.\nReturns a map of the keywords in `$args`.\n",
            "commentRange": {
                "start": 54,
                "end": 60
            },
            "context": {
                "type": "function",
                "name": "k-meta-keywords",
                "code": "\n    @return keywords( $args );\n",
                "line": {
                    "start": 61,
                    "end": 63
                },
                "signature": "k-meta-keywords($args)"
            },
            "return": {
                "type": "Map",
                "description": "A map of the keywords in `$args`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-keywords( ( \"foo\" \"bar\" \"baz\" \"qux\" ) ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "List",
                    "name": "args",
                    "description": "The arguments to process."
                }
            ]
        },
        {
            "description": "A wrapper around the `type-of()` function.\nReturns the type of `$value`.\n",
            "commentRange": {
                "start": 65,
                "end": 71
            },
            "context": {
                "type": "function",
                "name": "k-meta-type-of",
                "code": "\n    @return type-of( $value );\n",
                "line": {
                    "start": 72,
                    "end": 74
                },
                "signature": "k-meta-type-of($value)"
            },
            "return": {
                "type": "String",
                "description": "The type of `$value`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-deep-merge",
                        "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                        "line": {
                            "start": 56,
                            "end": 78
                        },
                        "signature": "k-map-deep-merge($maps)"
                    }
                },
                {
                    "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-deep-merge",
                        "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                        "line": {
                            "start": 56,
                            "end": 78
                        },
                        "signature": "k-map-deep-merge($maps)"
                    }
                },
                {
                    "description": "Returns negative values of a number or numbers in a list.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-negate",
                        "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                        "line": {
                            "start": 119,
                            "end": 135
                        },
                        "signature": "k-map-negate($map)"
                    }
                },
                {
                    "description": "Returns negative values of a number or numbers in a list.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-negate",
                        "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                        "line": {
                            "start": 119,
                            "end": 135
                        },
                        "signature": "k-map-negate($map)"
                    }
                },
                {
                    "description": "Returns negative values of a number or numbers in a list.\n",
                    "context": {
                        "type": "function",
                        "name": "k-map-negate",
                        "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                        "line": {
                            "start": 119,
                            "end": 135
                        },
                        "signature": "k-map-negate($map)"
                    }
                },
                {
                    "description": "Remove the unit from a number.\n",
                    "context": {
                        "type": "function",
                        "name": "k-math-strip-unit",
                        "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                        "line": {
                            "start": 215,
                            "end": 221
                        },
                        "signature": "k-math-strip-unit($number)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <number> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-number",
                        "code": "\n    @return k-meta-type-of( $value ) == \"number\";\n",
                        "line": {
                            "start": 96,
                            "end": 98
                        },
                        "signature": "k-meta-is-number($value)"
                    }
                },
                {
                    "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-string-replace",
                        "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 64,
                            "end": 76
                        },
                        "signature": "k-string-replace($string, $search, $replace)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-type-of( \"foo bar\" ); // => \"string\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to get the type of."
                }
            ]
        },
        {
            "description": "A wrapper around the `variable-exists()` function.\nReturns whether a variable with the name `$name` exists.\n",
            "commentRange": {
                "start": 76,
                "end": 82
            },
            "context": {
                "type": "function",
                "name": "k-meta-variable-exists",
                "code": "\n    @return variable-exists( $name );\n",
                "line": {
                    "start": 83,
                    "end": 85
                },
                "signature": "k-meta-variable-exists($name)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether a variable with the name `$name` exists.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Shades the color in light themes and tints it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-shade",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                        "line": {
                            "start": 60,
                            "end": 68
                        },
                        "signature": "k-try-shade($color, $level)"
                    }
                },
                {
                    "description": "Tints the color in light themes and shades it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-tint",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                        "line": {
                            "start": 76,
                            "end": 84
                        },
                        "signature": "k-try-tint($color, $level)"
                    }
                },
                {
                    "description": "Darkens the color in light themes and lightens it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-darken",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                        "line": {
                            "start": 92,
                            "end": 99
                        },
                        "signature": "k-try-darken($color, $level)"
                    }
                },
                {
                    "description": "Lightens the color in light themes and darkens it in dark themes\n",
                    "context": {
                        "type": "function",
                        "name": "k-try-lighten",
                        "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                        "line": {
                            "start": 107,
                            "end": 114
                        },
                        "signature": "k-try-lighten($color, $level)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-variable-exists( \"foo\" ); // => true",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "name",
                    "description": "The name of the variable to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <number> CSS data type.\n",
            "commentRange": {
                "start": 87,
                "end": 95
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-number",
                "code": "\n    @return k-meta-type-of( $value ) == \"number\";\n",
                "line": {
                    "start": 96,
                    "end": 98
                },
                "signature": "k-meta-is-number($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a number.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/number",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a <integer> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-integer",
                        "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                        "line": {
                            "start": 109,
                            "end": 111
                        },
                        "signature": "k-meta-is-integer($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <time> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-time",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 122,
                            "end": 124
                        },
                        "signature": "k-meta-is-time($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-angle",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 148,
                            "end": 150
                        },
                        "signature": "k-meta-is-angle($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-frequency",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 161,
                            "end": 163
                        },
                        "signature": "k-meta-is-frequency($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-relative-length",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 176,
                            "end": 178
                        },
                        "signature": "k-meta-is-relative-length($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-absolute-length",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 189,
                            "end": 191
                        },
                        "signature": "k-meta-is-absolute-length($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-percentage",
                        "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                        "line": {
                            "start": 202,
                            "end": 204
                        },
                        "signature": "k-meta-is-percentage($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-resolution",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 229,
                            "end": 231
                        },
                        "signature": "k-meta-is-resolution($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-number( 1 ); // => true\n@debug k-meta-is-number( \"foo\" ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <integer> CSS data type.\n",
            "commentRange": {
                "start": 100,
                "end": 108
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-integer",
                "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                "line": {
                    "start": 109,
                    "end": 111
                },
                "signature": "k-meta-is-integer($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a integer.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/integer",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-math-round"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-integer( 1 ); // => true\n@debug k-meta-is-integer( 1.5 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <time> CSS data type.\n",
            "commentRange": {
                "start": 113,
                "end": 121
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-time",
                "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                "line": {
                    "start": 122,
                    "end": 124
                },
                "signature": "k-meta-is-time($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a time.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/time",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a valid duration period.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-duration",
                        "code": "\n    @return k-meta-is-time( $value );\n",
                        "line": {
                            "start": 135,
                            "end": 137
                        },
                        "signature": "k-meta-is-duration($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-time( 1s ); // => true\n@debug k-meta-is-time( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a valid duration period.\n",
            "commentRange": {
                "start": 126,
                "end": 134
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-duration",
                "code": "\n    @return k-meta-is-time( $value );\n",
                "line": {
                    "start": 135,
                    "end": 137
                },
                "signature": "k-meta-is-duration($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a duration.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/time",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-time"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-duration( 1s ); // => true\n@debug k-meta-is-duration( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <angle> CSS data type.\n",
            "commentRange": {
                "start": 139,
                "end": 147
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-angle",
                "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                "line": {
                    "start": 148,
                    "end": 150
                },
                "signature": "k-meta-is-angle($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a angle.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/angle",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-angle( 1deg ); // => true\n@debug k-meta-is-angle( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
            "commentRange": {
                "start": 152,
                "end": 160
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-frequency",
                "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                "line": {
                    "start": 161,
                    "end": 163
                },
                "signature": "k-meta-is-frequency($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a frequency.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/frequency",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-frequency( 1Hz ); // => true\n@debug k-meta-is-frequency( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
            "commentRange": {
                "start": 165,
                "end": 175
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-relative-length",
                "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                "line": {
                    "start": 176,
                    "end": 178
                },
                "signature": "k-meta-is-relative-length($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a relative length.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_font",
                    "caption": ""
                },
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-length",
                        "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                        "line": {
                            "start": 216,
                            "end": 218
                        },
                        "signature": "k-meta-is-length($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-relative-length( 1em ); // => true\n@debug k-meta-is-relative-length( 1ch ); // => true\n@debug k-meta-is-relative-length( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
            "commentRange": {
                "start": 180,
                "end": 188
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-absolute-length",
                "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                "line": {
                    "start": 189,
                    "end": 191
                },
                "signature": "k-meta-is-absolute-length($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is an absolute length.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#absolute_length_units",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-length",
                        "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                        "line": {
                            "start": 216,
                            "end": 218
                        },
                        "signature": "k-meta-is-length($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-absolute-length( 1cm ); // => true\n@debug k-meta-is-absolute-length( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
            "commentRange": {
                "start": 193,
                "end": 201
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-percentage",
                "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                "line": {
                    "start": 202,
                    "end": 204
                },
                "signature": "k-meta-is-percentage($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a percentage.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/percentage",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a <position> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-position",
                        "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                        "line": {
                            "start": 241,
                            "end": 243
                        },
                        "signature": "k-meta-is-position($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-percentage( 1% ); // => true\n@debug k-meta-is-percentage( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <length> CSS data type.\n",
            "commentRange": {
                "start": 206,
                "end": 215
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-length",
                "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                "line": {
                    "start": 216,
                    "end": 218
                },
                "signature": "k-meta-is-length($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a length.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-relative-length"
                },
                {
                    "type": "function",
                    "name": "k-meta-is-absolute-length"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "usedBy": [
                {
                    "description": "Checks whether `$value` is a <position> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-position",
                        "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                        "line": {
                            "start": 241,
                            "end": 243
                        },
                        "signature": "k-meta-is-position($value)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-length( 1em ); // => true\n@debug k-meta-is-length( 1cm ); // => true\n@debug k-meta-is-length( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
            "commentRange": {
                "start": 220,
                "end": 228
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-resolution",
                "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                "line": {
                    "start": 229,
                    "end": 231
                },
                "signature": "k-meta-is-resolution($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a resolution.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/resolution",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-number"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-math-unit"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-resolution( 1dpi ); // => true\n@debug k-meta-is-resolution( 1 ); // => false",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Checks whether `$value` is a <position> CSS data type.\n",
            "commentRange": {
                "start": 233,
                "end": 240
            },
            "context": {
                "type": "function",
                "name": "k-meta-is-position",
                "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                "line": {
                    "start": 241,
                    "end": 243
                },
                "signature": "k-meta-is-position($value)"
            },
            "return": {
                "type": "Boolean",
                "description": "Whether `$value` is a position.\n"
            },
            "link": [
                {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/position",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-is-length"
                },
                {
                    "type": "function",
                    "name": "k-meta-is-percentage"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                }
            ],
            "file": {
                "path": "core/scss/functions/_meta.import.scss",
                "name": "_meta.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-meta-is-position( center ); // => true",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "Any",
                    "name": "value",
                    "description": "The value to check."
                }
            ]
        },
        {
            "description": "Returns the first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n",
            "commentRange": {
                "start": 10,
                "end": 16
            },
            "context": {
                "type": "function",
                "name": "k-string-index",
                "code": "\n    @return str-index( $string, $substring );\n",
                "line": {
                    "start": 17,
                    "end": 19
                },
                "signature": "k-string-index($string, $substring)"
            },
            "return": {
                "type": "Number",
                "description": "The first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "usedBy": [
                {
                    "description": "Escapes SVG characters in a string\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-svg",
                        "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 15,
                            "end": 28
                        },
                        "signature": "k-escape-svg($string)"
                    }
                },
                {
                    "description": "Escapes SVG characters in a string\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-svg",
                        "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 15,
                            "end": 28
                        },
                        "signature": "k-escape-svg($string)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <time> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-time",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 122,
                            "end": 124
                        },
                        "signature": "k-meta-is-time($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-angle",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 148,
                            "end": 150
                        },
                        "signature": "k-meta-is-angle($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-frequency",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 161,
                            "end": 163
                        },
                        "signature": "k-meta-is-frequency($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-relative-length",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 176,
                            "end": 178
                        },
                        "signature": "k-meta-is-relative-length($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-absolute-length",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 189,
                            "end": 191
                        },
                        "signature": "k-meta-is-absolute-length($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-resolution",
                        "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                        "line": {
                            "start": 229,
                            "end": 231
                        },
                        "signature": "k-meta-is-resolution($value)"
                    }
                },
                {
                    "description": "Checks whether `$value` is a <position> CSS data type.\n",
                    "context": {
                        "type": "function",
                        "name": "k-meta-is-position",
                        "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                        "line": {
                            "start": 241,
                            "end": 243
                        },
                        "signature": "k-meta-is-position($value)"
                    }
                },
                {
                    "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-string-replace",
                        "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 64,
                            "end": 76
                        },
                        "signature": "k-string-replace($string, $search, $replace)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-index( \"foo bar\", \"bar\" ); // => 5",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                },
                {
                    "type": "String",
                    "name": "substring",
                    "description": "The substring to look for."
                }
            ]
        },
        {
            "description": "Returns a copy of `$string` with `$insert` inserted at `$index`.\n",
            "commentRange": {
                "start": 21,
                "end": 28
            },
            "context": {
                "type": "function",
                "name": "k-string-insert",
                "code": "\n    @return str-insert( $string, $insert, $index );\n",
                "line": {
                    "start": 29,
                    "end": 31
                },
                "signature": "k-string-insert($string, $insert, $index)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-insert( \"foo bar\", \"baz\", 5 ); // => \"foo baz bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                },
                {
                    "type": "String",
                    "name": "insert",
                    "description": "The string to insert."
                },
                {
                    "type": "Number",
                    "name": "index",
                    "description": "The index at which to insert `$insert`."
                }
            ]
        },
        {
            "description": "Returns the length of `$string`.\n",
            "commentRange": {
                "start": 33,
                "end": 38
            },
            "context": {
                "type": "function",
                "name": "k-string-length",
                "code": "\n    @return str-length( $string );\n",
                "line": {
                    "start": 39,
                    "end": 41
                },
                "signature": "k-string-length($string)"
            },
            "return": {
                "type": "Number",
                "description": "The length of `$string`.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "usedBy": [
                {
                    "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-string-replace",
                        "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 64,
                            "end": 76
                        },
                        "signature": "k-string-replace($string, $search, $replace)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-length( \"foo bar\" ); // => 7",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                }
            ]
        },
        {
            "description": "Returns a copy of `$string` with quotes added.\n",
            "commentRange": {
                "start": 43,
                "end": 48
            },
            "context": {
                "type": "function",
                "name": "k-string-quote",
                "code": "\n    @return quote( $string );\n",
                "line": {
                    "start": 49,
                    "end": 51
                },
                "signature": "k-string-quote($string)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-quote( \"foo bar\" ); // => \"foo bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                }
            ]
        },
        {
            "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
            "commentRange": {
                "start": 53,
                "end": 63
            },
            "context": {
                "type": "function",
                "name": "k-string-replace",
                "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                "line": {
                    "start": 64,
                    "end": 76
                },
                "signature": "k-string-replace($string, $search, $replace)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "link": [
                {
                    "url": "https://www.sassmeister.com/gist/1b4f2da5527830088e4d",
                    "caption": ""
                }
            ],
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [
                {
                    "type": "function",
                    "name": "k-meta-type-of"
                },
                {
                    "type": "function",
                    "name": "k-string-index"
                },
                {
                    "type": "function",
                    "name": "k-string-slice"
                },
                {
                    "type": "function",
                    "name": "k-string-slice"
                },
                {
                    "type": "function",
                    "name": "k-string-length"
                }
            ],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "usedBy": [
                {
                    "description": "Escapes SVG characters in a string\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-svg",
                        "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 15,
                            "end": 28
                        },
                        "signature": "k-escape-svg($string)"
                    }
                },
                {
                    "description": "Escapes SVG characters in a string\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-svg",
                        "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 15,
                            "end": 28
                        },
                        "signature": "k-escape-svg($string)"
                    }
                },
                {
                    "description": "Escapes special characters in a class name\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-class-name",
                        "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                        "line": {
                            "start": 40,
                            "end": 48
                        },
                        "signature": "k-escape-class-name($text)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-replace( \"foo bar\", \"bar\", \"baz\" ); // => \"foo baz\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                },
                {
                    "type": "String",
                    "name": "search",
                    "description": "The substring to look for."
                },
                {
                    "type": "String",
                    "name": "replace",
                    "description": "The replacement string."
                }
            ]
        },
        {
            "description": "Returns a substring of `$string` starting at `$start-at` and ending at `$end-at`.\n",
            "commentRange": {
                "start": 78,
                "end": 85
            },
            "context": {
                "type": "function",
                "name": "k-string-slice",
                "code": "\n    @return str-slice( $string, $start-at, $end-at );\n",
                "line": {
                    "start": 86,
                    "end": 88
                },
                "signature": "k-string-slice($string, $start-at, $end-at)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "usedBy": [
                {
                    "description": "Escapes SVG characters in a string\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-svg",
                        "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 15,
                            "end": 28
                        },
                        "signature": "k-escape-svg($string)"
                    }
                },
                {
                    "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-string-replace",
                        "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 64,
                            "end": 76
                        },
                        "signature": "k-string-replace($string, $search, $replace)"
                    }
                },
                {
                    "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                    "context": {
                        "type": "function",
                        "name": "k-string-replace",
                        "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                        "line": {
                            "start": 64,
                            "end": 76
                        },
                        "signature": "k-string-replace($string, $search, $replace)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-slice( \"foo bar\", 5 ); // => \"bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                },
                {
                    "type": "Number",
                    "name": "start-at",
                    "description": "The index at which to start the substring."
                },
                {
                    "type": "Number",
                    "name": "end-at",
                    "description": "The index at which to end the substring."
                }
            ]
        },
        {
            "description": "Returns a copy of `$string` with all uppercase letters converted to lowercase.\n",
            "commentRange": {
                "start": 90,
                "end": 95
            },
            "context": {
                "type": "function",
                "name": "k-string-to-lower-case",
                "code": "\n    @return to-lower-case( $string );\n",
                "line": {
                    "start": 96,
                    "end": 98
                },
                "signature": "k-string-to-lower-case($string)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-to-lower-case( \"FOO BAR\" ); // => \"foo bar\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                }
            ]
        },
        {
            "description": "Returns a copy of `$string` with all lowercase letters converted to uppercase.\n",
            "commentRange": {
                "start": 100,
                "end": 105
            },
            "context": {
                "type": "function",
                "name": "k-string-to-upper-case",
                "code": "\n    @return to-upper-case( $string );\n",
                "line": {
                    "start": 106,
                    "end": 108
                },
                "signature": "k-string-to-upper-case($string)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-to-upper-case( \"foo bar\" ); // => \"FOO BAR\"",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                }
            ]
        },
        {
            "description": "Returns a unique identifier.\n",
            "commentRange": {
                "start": 110,
                "end": 114
            },
            "context": {
                "type": "function",
                "name": "k-string-unique-id",
                "code": "\n    @return unique-id();\n",
                "line": {
                    "start": 115,
                    "end": 117
                },
                "signature": "k-string-unique-id()"
            },
            "return": {
                "type": "String",
                "description": "The unique identifier.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-unique-id(); // => UNIQUE_ID",
                    "description": "Usage"
                }
            ],
            "parameters": []
        },
        {
            "description": "Returns a copy of `$string` with quotes removed.\n",
            "commentRange": {
                "start": 119,
                "end": 124
            },
            "context": {
                "type": "function",
                "name": "k-string-unquote",
                "code": "\n    @return unquote( $string );\n",
                "line": {
                    "start": 125,
                    "end": 127
                },
                "signature": "k-string-unquote($string)"
            },
            "return": {
                "type": "String",
                "description": "The resulting string.\n"
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "require": [],
            "file": {
                "path": "core/scss/functions/_string.import.scss",
                "name": "_string.import.scss"
            },
            "usedBy": [
                {
                    "description": "Escapes special characters in a class name\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-class-name",
                        "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                        "line": {
                            "start": 40,
                            "end": 48
                        },
                        "signature": "k-escape-class-name($text)"
                    }
                },
                {
                    "description": "Escapes special characters in a class name\n",
                    "context": {
                        "type": "function",
                        "name": "k-escape-class-name",
                        "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                        "line": {
                            "start": 40,
                            "end": 48
                        },
                        "signature": "k-escape-class-name($text)"
                    }
                }
            ],
            "examples": [
                {
                    "type": "scss",
                    "code": "@debug k-string-unquote( \"foo bar\" ); // => foo bar",
                    "description": "Usage"
                }
            ],
            "parameters": [
                {
                    "type": "String",
                    "name": "string",
                    "description": "The string to process."
                }
            ]
        }
    ],
    "placeholders": [],
    "css": [
        {
            "description": "This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.\n    @name .k-sr-only\n    @group accessibility\n",
            "commentRange": {
                "start": 3,
                "end": 5
            },
            "context": {
                "type": "css",
                "name": ".k-sr-only",
                "value": "position: absolute;\n        left: -1px;\n        width: 1px;\n        height: 1px;\n        overflow: hidden;",
                "line": {
                    "start": 6,
                    "end": 15
                }
            },
            "access": "public",
            "group": [
                "undefined"
            ],
            "file": {
                "path": "core/scss/styles/_accessibility.scss",
                "name": "_accessibility.scss"
            }
        }
    ],
    "variableGroups": [
        {
            "id": "common",
            "title": "Common",
            "variables": [
                {
                    "description": "The background color of disabled items.\n",
                    "commentRange": {
                        "start": 41,
                        "end": 41
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-disabled-bg",
                        "value": "null",
                        "scope": "default",
                        "line": {
                            "start": 42,
                            "end": 42
                        }
                    },
                    "access": "public",
                    "group": [
                        "undefined"
                    ],
                    "file": {
                        "path": "core/scss/color-system/_swatch-legacy.scss",
                        "name": "_swatch-legacy.scss"
                    },
                    "resolvedValue": "null",
                    "resolvedType": "Null"
                },
                {
                    "description": "The text color of disabled items.\n",
                    "commentRange": {
                        "start": 43,
                        "end": 43
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-disabled-text",
                        "value": "null",
                        "scope": "default",
                        "line": {
                            "start": 44,
                            "end": 44
                        }
                    },
                    "access": "public",
                    "group": [
                        "undefined"
                    ],
                    "file": {
                        "path": "core/scss/color-system/_swatch-legacy.scss",
                        "name": "_swatch-legacy.scss"
                    },
                    "resolvedValue": "null",
                    "resolvedType": "Null"
                },
                {
                    "description": "The border color of disabled items.\n",
                    "commentRange": {
                        "start": 45,
                        "end": 45
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-disabled-border",
                        "value": "null",
                        "scope": "default",
                        "line": {
                            "start": 46,
                            "end": 46
                        }
                    },
                    "access": "public",
                    "group": [
                        "undefined"
                    ],
                    "file": {
                        "path": "core/scss/color-system/_swatch-legacy.scss",
                        "name": "_swatch-legacy.scss"
                    },
                    "resolvedValue": "null",
                    "resolvedType": "Null"
                },
                {
                    "description": "The opacity of disabled items.\n",
                    "commentRange": {
                        "start": 47,
                        "end": 47
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-disabled-opacity",
                        "value": "null",
                        "scope": "default",
                        "line": {
                            "start": 48,
                            "end": 48
                        }
                    },
                    "access": "public",
                    "group": [
                        "undefined"
                    ],
                    "file": {
                        "path": "core/scss/color-system/_swatch-legacy.scss",
                        "name": "_swatch-legacy.scss"
                    },
                    "resolvedValue": "null",
                    "resolvedType": "Null"
                },
                {
                    "description": "The filter of disabled items.\n",
                    "commentRange": {
                        "start": 49,
                        "end": 49
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-disabled-filter",
                        "value": "null",
                        "scope": "default",
                        "line": {
                            "start": 50,
                            "end": 50
                        }
                    },
                    "access": "public",
                    "group": [
                        "undefined"
                    ],
                    "file": {
                        "path": "core/scss/color-system/_swatch-legacy.scss",
                        "name": "_swatch-legacy.scss"
                    },
                    "resolvedValue": "null",
                    "resolvedType": "Null"
                }
            ]
        },
        {
            "id": "accessibility",
            "title": "Accessibility",
            "variables": [
                {
                    "description": "The contrast ratio to reach against white, to determine if color changes from \"light\" to \"dark\".\nAcceptable values for WCAG 2.0 are 3, 4.5 and 7.\n",
                    "commentRange": {
                        "start": 273,
                        "end": 279
                    },
                    "context": {
                        "type": "variable",
                        "name": "wcag-min-contrast-ratio",
                        "value": "7",
                        "scope": "default",
                        "line": {
                            "start": 280,
                            "end": 280
                        }
                    },
                    "type": "Number",
                    "group": [
                        "accessibility"
                    ],
                    "link": [
                        {
                            "url": "https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast",
                            "caption": ""
                        },
                        {
                            "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                            "caption": ""
                        }
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/functions/_color-contrast.import.scss",
                        "name": "_color-contrast.import.scss"
                    },
                    "resolvedValue": "7",
                    "resolvedType": "Number"
                },
                {
                    "description": "Default dark color for WCAG 2.0.\n",
                    "commentRange": {
                        "start": 281,
                        "end": 283
                    },
                    "context": {
                        "type": "variable",
                        "name": "wcag-dark",
                        "value": "black",
                        "scope": "default",
                        "line": {
                            "start": 284,
                            "end": 284
                        }
                    },
                    "type": "Color",
                    "group": [
                        "accessibility"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/functions/_color-contrast.import.scss",
                        "name": "_color-contrast.import.scss"
                    },
                    "resolvedValue": "black",
                    "resolvedType": "Color"
                },
                {
                    "description": "Default light color for WCAG 2.0.\n",
                    "commentRange": {
                        "start": 285,
                        "end": 287
                    },
                    "context": {
                        "type": "variable",
                        "name": "wcag-light",
                        "value": "white",
                        "scope": "default",
                        "line": {
                            "start": 288,
                            "end": 288
                        }
                    },
                    "type": "Color",
                    "group": [
                        "accessibility"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/functions/_color-contrast.import.scss",
                        "name": "_color-contrast.import.scss"
                    },
                    "resolvedValue": "white",
                    "resolvedType": "Color"
                }
            ]
        },
        {
            "id": "radii",
            "title": "Border Radius",
            "variables": [
                {
                    "description": "The none border radius used across the Components.\n",
                    "commentRange": {
                        "start": 1,
                        "end": 2
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-none",
                        "value": "k-map-get($kendo-spacing, 0)",
                        "scope": "default",
                        "line": {
                            "start": 3,
                            "end": 3
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0px",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra small border radius used across the Components.\n",
                    "commentRange": {
                        "start": 4,
                        "end": 5
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-xs",
                        "value": "k-map-get($kendo-spacing, 1px)",
                        "scope": "default",
                        "line": {
                            "start": 6,
                            "end": 6
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1px",
                    "resolvedType": "Number"
                },
                {
                    "description": "The small border radius used across the Components.\n",
                    "commentRange": {
                        "start": 7,
                        "end": 8
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-sm",
                        "value": "k-map-get($kendo-spacing, 0.5)",
                        "scope": "default",
                        "line": {
                            "start": 9,
                            "end": 9
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.125rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The medium border radius used across the Components.\n",
                    "commentRange": {
                        "start": 10,
                        "end": 11
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-md",
                        "value": "k-map-get($kendo-spacing, 1)",
                        "scope": "default",
                        "line": {
                            "start": 12,
                            "end": 12
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.25rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The large border radius used across the Components.\n",
                    "commentRange": {
                        "start": 13,
                        "end": 14
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-lg",
                        "value": "k-map-get($kendo-spacing, 1.5)",
                        "scope": "default",
                        "line": {
                            "start": 15,
                            "end": 15
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.375rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra large border radius used across the Components.\n",
                    "commentRange": {
                        "start": 16,
                        "end": 17
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-xl",
                        "value": "k-map-get($kendo-spacing, 2)",
                        "scope": "default",
                        "line": {
                            "start": 18,
                            "end": 18
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.5rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The third largest border radius used across the Components.\n",
                    "commentRange": {
                        "start": 19,
                        "end": 20
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-xxl",
                        "value": "k-map-get($kendo-spacing, 3)",
                        "scope": "default",
                        "line": {
                            "start": 21,
                            "end": 21
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.75rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The second largest border radius used across the Components.\n",
                    "commentRange": {
                        "start": 22,
                        "end": 23
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-xxxl",
                        "value": "k-map-get($kendo-spacing, 4)",
                        "scope": "default",
                        "line": {
                            "start": 24,
                            "end": 24
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The largest border radius used across the Components.\n",
                    "commentRange": {
                        "start": 25,
                        "end": 26
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radius-full",
                        "value": "9999px",
                        "scope": "default",
                        "line": {
                            "start": 27,
                            "end": 27
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "9999px",
                    "resolvedType": "Number"
                },
                {
                    "description": "The global radii Map.\n",
                    "commentRange": {
                        "start": 45,
                        "end": 46
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-border-radii",
                        "value": "k-map-merge($_default-border-radii, $kendo-border-radii)",
                        "scope": "private",
                        "line": {
                            "start": 47,
                            "end": 47
                        }
                    },
                    "group": [
                        "radii"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/border-radii/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(none: 0px, xs: 1px, sm: 0.125rem, md: 0.25rem, lg: 0.375rem, xl: 0.5rem, xxl: 0.75rem, xxxl: 1rem, full: 9999px)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "none": "0px",
                        "xs": "1px",
                        "sm": "0.125rem",
                        "md": "0.25rem",
                        "lg": "0.375rem",
                        "xl": "0.5rem",
                        "xxl": "0.75rem",
                        "xxxl": "1rem",
                        "full": "9999px"
                    }
                }
            ]
        },
        {
            "id": "color-system",
            "title": "Color System",
            "variables": [
                {
                    "description": "The color white.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 3,
                        "end": 6
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-color-white",
                        "value": "#ffffff",
                        "scope": "private",
                        "line": {
                            "start": 7,
                            "end": 7
                        }
                    },
                    "type": "Color",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "#ffffff",
                    "resolvedType": "Color"
                },
                {
                    "description": "The color black.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 9,
                        "end": 12
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-color-black",
                        "value": "#000000",
                        "scope": "private",
                        "line": {
                            "start": 13,
                            "end": 13
                        }
                    },
                    "type": "Color",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "#000000",
                    "resolvedType": "Color"
                },
                {
                    "description": "The color transparent.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 15,
                        "end": 18
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-color-rgba-transparent",
                        "value": "rgba(0, 0, 0, 0)",
                        "scope": "private",
                        "line": {
                            "start": 19,
                            "end": 19
                        }
                    },
                    "type": "Color",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "rgba(0, 0, 0, 0)",
                    "resolvedType": "Color"
                },
                {
                    "description": "A gradient that goes from transparent to black.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 21,
                        "end": 24
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-gradient-transparent-to-black",
                        "value": "rgba(black, 0), black",
                        "scope": "private",
                        "line": {
                            "start": 25,
                            "end": 25
                        }
                    },
                    "type": "Gradient",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "rgba(0, 0, 0, 0), black",
                    "resolvedType": "Gradient"
                },
                {
                    "description": "A gradient that goes from transparent to white.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 27,
                        "end": 30
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-gradient-transparent-to-white",
                        "value": "rgba(white, 0), white",
                        "scope": "private",
                        "line": {
                            "start": 31,
                            "end": 31
                        }
                    },
                    "type": "Gradient",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "rgba(255, 255, 255, 0), white",
                    "resolvedType": "Gradient"
                },
                {
                    "description": "A gradient that goes from black to transparent.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 33,
                        "end": 36
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-gradient-black-to-transparent",
                        "value": "black, rgba(black, 0)",
                        "scope": "private",
                        "line": {
                            "start": 37,
                            "end": 37
                        }
                    },
                    "type": "Gradient",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "black, rgba(0, 0, 0, 0)",
                    "resolvedType": "Gradient"
                },
                {
                    "description": "A gradient that goes from white to transparent.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 39,
                        "end": 42
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-gradient-white-to-transparent",
                        "value": "white, rgba(white, 0)",
                        "scope": "private",
                        "line": {
                            "start": 43,
                            "end": 43
                        }
                    },
                    "type": "Gradient",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "white, rgba(255, 255, 255, 0)",
                    "resolvedType": "Gradient"
                },
                {
                    "description": "A gradient that cycles through the colors of the rainbow.\nNote: you cannot change this value.\n",
                    "commentRange": {
                        "start": 45,
                        "end": 48
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-gradient-rainbow",
                        "value": "#ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000",
                        "scope": "private",
                        "line": {
                            "start": 49,
                            "end": 49
                        }
                    },
                    "type": "Gradient",
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_constants.scss",
                        "name": "_constants.scss"
                    },
                    "resolvedValue": "#ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000",
                    "resolvedType": "Gradient"
                },
                {
                    "description": "The global default Colors map.\n",
                    "commentRange": {
                        "start": 175,
                        "end": 176
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-colors",
                        "value": "$_default-colors",
                        "scope": "default",
                        "line": {
                            "start": 177,
                            "end": 177
                        }
                    },
                    "group": [
                        "color-system"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/color-system/_swatch.scss",
                        "name": "_swatch.scss"
                    },
                    "usedBy": [
                        {
                            "description": "Takes a color name from the $kendo-colors map as a parameter\nand returns a CSS variable with the actual color as a fallback\n",
                            "context": {
                                "type": "function",
                                "name": "k-color",
                                "code": "\n    $_color: k-map-get($kendo-colors, $key);\n\n    @if ($_color) {\n        @return var(--kendo-color-#{$key}, $_color);\n    } @else {\n        @error \"Color Variable \\`#{$key}\\` does not exists in the color collection.\";\n    }\n",
                                "line": {
                                    "start": 130,
                                    "end": 138
                                },
                                "signature": "k-color($key)"
                            }
                        }
                    ],
                    "resolvedValue": "(app-surface: #ffffff, on-app-surface: #3d3d3d, subtle: #666666, surface: #fafafa, surface-alt: #ffffff, border: rgba(0, 0, 0, 0.08), border-alt: rgba(0, 0, 0, 0.16), base-subtle: #ebebeb, base-subtle-hover: #e0e0e0, base-subtle-active: #d6d6d6, base: #f5f5f5, base-hover: #ebebeb, base-active: #d6d6d6, base-emphasis: #c2c2c2, base-on-subtle: #3d3d3d, on-base: #3d3d3d, base-on-surface: #3d3d3d, primary-subtle: #ffeceb, primary-subtle-hover: #ffdedb, primary-subtle-active: #ffc8c4, primary: #ff6358, primary-hover: #ea5a51, primary-active: #d45349, primary-emphasis: #ff9d97, primary-on-subtle: #5c201c, on-primary: #ffffff, primary-on-surface: #ff6358, secondary-subtle: #fafafa, secondary-subtle-hover: #f5f5f5, secondary-subtle-active: #ebebeb, secondary: #666666, secondary-hover: #525252, secondary-active: #3d3d3d, secondary-emphasis: #e0e0e0, secondary-on-subtle: #141414, on-secondary: #ffffff, secondary-on-surface: #292929, tertiary-subtle: #d8f1fd, tertiary-subtle-hover: #c5eafc, tertiary-subtle-active: #a3dffb, tertiary: #03a9f4, tertiary-hover: #039ae0, tertiary-active: #028ccb, tertiary-emphasis: #61c9f9, tertiary-on-subtle: #023f5c, on-tertiary: #ffffff, tertiary-on-surface: #028ccb, info-subtle: #d2e2fb, info-subtle-hover: #bdd4f8, info-subtle-active: #80acf4, info: #0058e9, info-hover: #0052d6, info-active: #004ac2, info-emphasis: #6098f2, info-on-subtle: #002259, on-info: #ffffff, info-on-surface: #004ac2, success-subtle: #dcf0d3, success-subtle-hover: #cbe9bf, success-subtle-active: #b7e1a5, success: #37b400, success-hover: #32a500, success-active: #2d9600, success-emphasis: #81d15f, success-on-subtle: #1c5a00, on-success: #ffffff, success-on-surface: #2d9600, warning-subtle: #fff4d3, warning-subtle-hover: #ffeebd, warning-subtle-active: #ffe79e, warning: #ffc000, warning-hover: #eaaf00, warning-active: #d49f00, warning-emphasis: #ffd760, warning-on-subtle: #5e4700, on-warning: #3d3d3d, warning-on-surface: #ffc000, error-subtle: #fcddda, error-subtle-hover: #fbc8c3, error-subtle-active: #f98b80, error: #f31700, error-hover: #df1600, error-active: #ca1400, error-emphasis: #f76f60, error-on-subtle: #7a0c00, on-error: #ffffff, error-on-surface: #ca1400, light-subtle: #fafafa, light-subtle-hover: #f5f5f5, light-subtle-active: #ebebeb, light: #ebebeb, light-hover: #e0e0e0, light-active: #d6d6d6, light-emphasis: #d6d6d6, light-on-subtle: #141414, on-light: #000000, light-on-surface: #e0e0e0, dark-subtle: #c2c2c2, dark-subtle-hover: #adadad, dark-subtle-active: #999999, dark: #3d3d3d, dark-hover: #292929, dark-active: #1f1f1f, dark-emphasis: #666666, dark-on-subtle: #1f1f1f, on-dark: #ffffff, dark-on-surface: #141414, inverse-subtle: #c2c2c2, inverse-subtle-hover: #adadad, inverse-subtle-active: #999999, inverse: #3d3d3d, inverse-hover: #292929, inverse-active: #1f1f1f, inverse-emphasis: #666666, inverse-on-subtle: #1f1f1f, on-inverse: #ffffff, inverse-on-surface: #141414, series-a: #ff6358, series-a-bold: #bf4a42, series-a-bolder: #80322c, series-a-subtle: #ffb1ac, series-a-subtler: #ff8a82, series-b: #ffe162, series-b-bold: #bfa94a, series-b-bolder: #807131, series-b-subtle: #fff0b1, series-b-subtler: #ffe989, series-c: #4cd180, series-c-bold: #399d60, series-c-bolder: #266940, series-c-subtle: #a6e8c0, series-c-subtler: #79dda0, series-d: #4b5ffa, series-d-bold: #3847bc, series-d-bolder: #26307d, series-d-subtle: #a5affd, series-d-subtler: #7887fb, series-e: #ac58ff, series-e-bold: #8142bf, series-e-bolder: #562c80, series-e-subtle: #d6acff, series-e-subtler: #c182ff, series-f: #ff5892, series-f-bold: #bf426e, series-f-bolder: #802c49, series-f-subtle: #ffacc9, series-f-subtler: #ff82ae)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "app-surface": "#ffffff",
                        "on-app-surface": "#3d3d3d",
                        "subtle": "#666666",
                        "surface": "#fafafa",
                        "surface-alt": "#ffffff",
                        "border": "rgba(0, 0, 0, 0.08)",
                        "border-alt": "rgba(0, 0, 0, 0.16)",
                        "base-subtle": "#ebebeb",
                        "base-subtle-hover": "#e0e0e0",
                        "base-subtle-active": "#d6d6d6",
                        "base": "#f5f5f5",
                        "base-hover": "#ebebeb",
                        "base-active": "#d6d6d6",
                        "base-emphasis": "#c2c2c2",
                        "base-on-subtle": "#3d3d3d",
                        "on-base": "#3d3d3d",
                        "base-on-surface": "#3d3d3d",
                        "primary-subtle": "#ffeceb",
                        "primary-subtle-hover": "#ffdedb",
                        "primary-subtle-active": "#ffc8c4",
                        "primary": "#ff6358",
                        "primary-hover": "#ea5a51",
                        "primary-active": "#d45349",
                        "primary-emphasis": "#ff9d97",
                        "primary-on-subtle": "#5c201c",
                        "on-primary": "#ffffff",
                        "primary-on-surface": "#ff6358",
                        "secondary-subtle": "#fafafa",
                        "secondary-subtle-hover": "#f5f5f5",
                        "secondary-subtle-active": "#ebebeb",
                        "secondary": "#666666",
                        "secondary-hover": "#525252",
                        "secondary-active": "#3d3d3d",
                        "secondary-emphasis": "#e0e0e0",
                        "secondary-on-subtle": "#141414",
                        "on-secondary": "#ffffff",
                        "secondary-on-surface": "#292929",
                        "tertiary-subtle": "#d8f1fd",
                        "tertiary-subtle-hover": "#c5eafc",
                        "tertiary-subtle-active": "#a3dffb",
                        "tertiary": "#03a9f4",
                        "tertiary-hover": "#039ae0",
                        "tertiary-active": "#028ccb",
                        "tertiary-emphasis": "#61c9f9",
                        "tertiary-on-subtle": "#023f5c",
                        "on-tertiary": "#ffffff",
                        "tertiary-on-surface": "#028ccb",
                        "info-subtle": "#d2e2fb",
                        "info-subtle-hover": "#bdd4f8",
                        "info-subtle-active": "#80acf4",
                        "info": "#0058e9",
                        "info-hover": "#0052d6",
                        "info-active": "#004ac2",
                        "info-emphasis": "#6098f2",
                        "info-on-subtle": "#002259",
                        "on-info": "#ffffff",
                        "info-on-surface": "#004ac2",
                        "success-subtle": "#dcf0d3",
                        "success-subtle-hover": "#cbe9bf",
                        "success-subtle-active": "#b7e1a5",
                        "success": "#37b400",
                        "success-hover": "#32a500",
                        "success-active": "#2d9600",
                        "success-emphasis": "#81d15f",
                        "success-on-subtle": "#1c5a00",
                        "on-success": "#ffffff",
                        "success-on-surface": "#2d9600",
                        "warning-subtle": "#fff4d3",
                        "warning-subtle-hover": "#ffeebd",
                        "warning-subtle-active": "#ffe79e",
                        "warning": "#ffc000",
                        "warning-hover": "#eaaf00",
                        "warning-active": "#d49f00",
                        "warning-emphasis": "#ffd760",
                        "warning-on-subtle": "#5e4700",
                        "on-warning": "#3d3d3d",
                        "warning-on-surface": "#ffc000",
                        "error-subtle": "#fcddda",
                        "error-subtle-hover": "#fbc8c3",
                        "error-subtle-active": "#f98b80",
                        "error": "#f31700",
                        "error-hover": "#df1600",
                        "error-active": "#ca1400",
                        "error-emphasis": "#f76f60",
                        "error-on-subtle": "#7a0c00",
                        "on-error": "#ffffff",
                        "error-on-surface": "#ca1400",
                        "light-subtle": "#fafafa",
                        "light-subtle-hover": "#f5f5f5",
                        "light-subtle-active": "#ebebeb",
                        "light": "#ebebeb",
                        "light-hover": "#e0e0e0",
                        "light-active": "#d6d6d6",
                        "light-emphasis": "#d6d6d6",
                        "light-on-subtle": "#141414",
                        "on-light": "#000000",
                        "light-on-surface": "#e0e0e0",
                        "dark-subtle": "#c2c2c2",
                        "dark-subtle-hover": "#adadad",
                        "dark-subtle-active": "#999999",
                        "dark": "#3d3d3d",
                        "dark-hover": "#292929",
                        "dark-active": "#1f1f1f",
                        "dark-emphasis": "#666666",
                        "dark-on-subtle": "#1f1f1f",
                        "on-dark": "#ffffff",
                        "dark-on-surface": "#141414",
                        "inverse-subtle": "#c2c2c2",
                        "inverse-subtle-hover": "#adadad",
                        "inverse-subtle-active": "#999999",
                        "inverse": "#3d3d3d",
                        "inverse-hover": "#292929",
                        "inverse-active": "#1f1f1f",
                        "inverse-emphasis": "#666666",
                        "inverse-on-subtle": "#1f1f1f",
                        "on-inverse": "#ffffff",
                        "inverse-on-surface": "#141414",
                        "series-a": "#ff6358",
                        "series-a-bold": "#bf4a42",
                        "series-a-bolder": "#80322c",
                        "series-a-subtle": "#ffb1ac",
                        "series-a-subtler": "#ff8a82",
                        "series-b": "#ffe162",
                        "series-b-bold": "#bfa94a",
                        "series-b-bolder": "#807131",
                        "series-b-subtle": "#fff0b1",
                        "series-b-subtler": "#ffe989",
                        "series-c": "#4cd180",
                        "series-c-bold": "#399d60",
                        "series-c-bolder": "#266940",
                        "series-c-subtle": "#a6e8c0",
                        "series-c-subtler": "#79dda0",
                        "series-d": "#4b5ffa",
                        "series-d-bold": "#3847bc",
                        "series-d-bolder": "#26307d",
                        "series-d-subtle": "#a5affd",
                        "series-d-subtler": "#7887fb",
                        "series-e": "#ac58ff",
                        "series-e-bold": "#8142bf",
                        "series-e-bolder": "#562c80",
                        "series-e-subtle": "#d6acff",
                        "series-e-subtler": "#c182ff",
                        "series-f": "#ff5892",
                        "series-f-bold": "#bf426e",
                        "series-f-bolder": "#802c49",
                        "series-f-subtle": "#ffacc9",
                        "series-f-subtler": "#ff82ae"
                    }
                }
            ]
        },
        {
            "id": "elevation",
            "title": "Elevation",
            "variables": [
                {
                    "description": "The global default Elevation map.\n",
                    "commentRange": {
                        "start": 42,
                        "end": 43
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-elevation",
                        "value": "$_default-elevation",
                        "scope": "default",
                        "line": {
                            "start": 44,
                            "end": 44
                        }
                    },
                    "group": [
                        "elevation"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/elevation/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(1: (0 2px 3px rgba(0, 0, 0, 0.04), 0 4px 16px rgba(0, 0, 0, 0.12)), 2: (0 4px 6px rgba(0, 0, 0, 0.06), 0 4px 16px rgba(0, 0, 0, 0.12)), 3: (0 6px 8px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.12)), 4: (0 8px 10px rgba(0, 0, 0, 0.12), 0 4px 16px rgba(0, 0, 0, 0.12)), 5: (0 10px 12px rgba(0, 0, 0, 0.16), 0 4px 16px rgba(0, 0, 0, 0.12)), 6: (0 12px 14px rgba(0, 0, 0, 0.2), 0 4px 16px rgba(0, 0, 0, 0.12)), 7: (0 14px 16px rgba(0, 0, 0, 0.24), 0 4px 16px rgba(0, 0, 0, 0.12)), 8: (0 16px 18px rgba(0, 0, 0, 0.28), 0 4px 16px rgba(0, 0, 0, 0.12)), 9: (0 32px 34px rgba(0, 0, 0, 0.32), 0 4px 16px rgba(0, 0, 0, 0.12)))",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "1": "0 2px 3px rgba(0, 0, 0, 0.04), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "2": "0 4px 6px rgba(0, 0, 0, 0.06), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "3": "0 6px 8px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "4": "0 8px 10px rgba(0, 0, 0, 0.12), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "5": "0 10px 12px rgba(0, 0, 0, 0.16), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "6": "0 12px 14px rgba(0, 0, 0, 0.2), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "7": "0 14px 16px rgba(0, 0, 0, 0.24), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "8": "0 16px 18px rgba(0, 0, 0, 0.28), 0 4px 16px rgba(0, 0, 0, 0.12)",
                        "9": "0 32px 34px rgba(0, 0, 0, 0.32), 0 4px 16px rgba(0, 0, 0, 0.12)"
                    }
                }
            ]
        },
        {
            "id": "spacing",
            "title": "Spacing",
            "variables": [
                {
                    "description": "The global default Spacing map.\n",
                    "commentRange": {
                        "start": 46,
                        "end": 47
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-spacing",
                        "value": "$_default-spacing",
                        "scope": "default",
                        "line": {
                            "start": 48,
                            "end": 48
                        }
                    },
                    "group": [
                        "spacing"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/spacing/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(0: 0px, 1px: 1px, 0.5: 0.125rem, 1: 0.25rem, 1.5: 0.375rem, 2: 0.5rem, 2.5: 0.625rem, 3: 0.75rem, 3.5: 0.875rem, 4: 1rem, 4.5: 1.125rem, 5: 1.25rem, 5.5: 1.375rem, 6: 1.5rem, 6.5: 1.625rem, 7: 1.75rem, 7.5: 1.875rem, 8: 2rem, 9: 2.25rem, 10: 2.5rem, 11: 2.75rem, 12: 3rem, 13: 3.25rem, 14: 3.5rem, 15: 3.75rem, 16: 4rem, 17: 4.25rem, 18: 4.5rem, 19: 4.75rem, 20: 5rem, 21: 5.25rem, 22: 5.5rem, 23: 5.75rem, 24: 6rem, 25: 7rem, 26: 8rem, 27: 9rem, 28: 10rem, 29: 11rem, 30: 12rem)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "0": "0px",
                        "1": "0.25rem",
                        "2": "0.5rem",
                        "3": "0.75rem",
                        "4": "1rem",
                        "5": "1.25rem",
                        "6": "1.5rem",
                        "7": "1.75rem",
                        "8": "2rem",
                        "9": "2.25rem",
                        "10": "2.5rem",
                        "11": "2.75rem",
                        "12": "3rem",
                        "13": "3.25rem",
                        "14": "3.5rem",
                        "15": "3.75rem",
                        "16": "4rem",
                        "17": "4.25rem",
                        "18": "4.5rem",
                        "19": "4.75rem",
                        "20": "5rem",
                        "21": "5.25rem",
                        "22": "5.5rem",
                        "23": "5.75rem",
                        "24": "6rem",
                        "25": "7rem",
                        "26": "8rem",
                        "27": "9rem",
                        "28": "10rem",
                        "29": "11rem",
                        "30": "12rem",
                        "1px": "1px",
                        "0.5": "0.125rem",
                        "1.5": "0.375rem",
                        "2.5": "0.625rem",
                        "3.5": "0.875rem",
                        "4.5": "1.125rem",
                        "5.5": "1.375rem",
                        "6.5": "1.625rem",
                        "7.5": "1.875rem"
                    }
                }
            ]
        },
        {
            "id": "typography",
            "title": "Typography",
            "variables": [
                {
                    "description": "The base font size across all components.\n",
                    "commentRange": {
                        "start": 3,
                        "end": 4
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size",
                        "value": "0.875rem",
                        "scope": "default",
                        "line": {
                            "start": 5,
                            "end": 5
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.875rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra extra small font size across all components.\n",
                    "commentRange": {
                        "start": 6,
                        "end": 7
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size-xxs",
                        "value": "0.5rem",
                        "scope": "default",
                        "line": {
                            "start": 8,
                            "end": 8
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.5rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra small font size across all components.\n",
                    "commentRange": {
                        "start": 9,
                        "end": 10
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size-xs",
                        "value": "0.625rem",
                        "scope": "default",
                        "line": {
                            "start": 11,
                            "end": 11
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.625rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The small font size across all components.\n",
                    "commentRange": {
                        "start": 12,
                        "end": 13
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size-sm",
                        "value": "0.75rem",
                        "scope": "default",
                        "line": {
                            "start": 14,
                            "end": 14
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.75rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The medium font size across all components.\n",
                    "commentRange": {
                        "start": 15,
                        "end": 16
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size-md",
                        "value": "$kendo-font-size",
                        "scope": "default",
                        "line": {
                            "start": 17,
                            "end": 17
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.875rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The large font size across all components.\n",
                    "commentRange": {
                        "start": 18,
                        "end": 19
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size-lg",
                        "value": "1rem",
                        "scope": "default",
                        "line": {
                            "start": 20,
                            "end": 20
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra large font size across all components.\n",
                    "commentRange": {
                        "start": 21,
                        "end": 22
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-size-xl",
                        "value": "1.25rem",
                        "scope": "default",
                        "line": {
                            "start": 23,
                            "end": 23
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1.25rem",
                    "resolvedType": "Number"
                },
                {
                    "description": "The base line height across all components.\n",
                    "commentRange": {
                        "start": 25,
                        "end": 26
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-height",
                        "value": "k-math-div( 20, 14 )",
                        "scope": "default",
                        "line": {
                            "start": 27,
                            "end": 27
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1.4285714286",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra small line height across all components.\n",
                    "commentRange": {
                        "start": 28,
                        "end": 29
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-height-xs",
                        "value": "1",
                        "scope": "default",
                        "line": {
                            "start": 30,
                            "end": 30
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1",
                    "resolvedType": "Number"
                },
                {
                    "description": "The small line height across all components.\n",
                    "commentRange": {
                        "start": 31,
                        "end": 32
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-height-sm",
                        "value": "1.25",
                        "scope": "default",
                        "line": {
                            "start": 33,
                            "end": 33
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1.25",
                    "resolvedType": "Number"
                },
                {
                    "description": "The medium line height across all components.\n",
                    "commentRange": {
                        "start": 34,
                        "end": 35
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-height-md",
                        "value": "$kendo-line-height",
                        "scope": "default",
                        "line": {
                            "start": 36,
                            "end": 36
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1.4285714286",
                    "resolvedType": "Number"
                },
                {
                    "description": "The large line height across all components.\n",
                    "commentRange": {
                        "start": 37,
                        "end": 38
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-height-lg",
                        "value": "1.5",
                        "scope": "default",
                        "line": {
                            "start": 39,
                            "end": 39
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "1.5",
                    "resolvedType": "Number"
                },
                {
                    "description": "The base line height in ems across all components.\n",
                    "commentRange": {
                        "start": 40,
                        "end": 41
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-height-em",
                        "value": "calc( #{$kendo-line-height-md} * 1em )",
                        "scope": "default",
                        "line": {
                            "start": 42,
                            "end": 42
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "calc(1.4285714286 * 1em)",
                    "resolvedType": "Calculation"
                },
                {
                    "description": "The base font weight across all components.\n",
                    "commentRange": {
                        "start": 44,
                        "end": 45
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight",
                        "value": "400",
                        "scope": "default",
                        "line": {
                            "start": 46,
                            "end": 46
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "400",
                    "resolvedType": "Number"
                },
                {
                    "description": "The thin font weight across all components.\n",
                    "commentRange": {
                        "start": 47,
                        "end": 48
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-thin",
                        "value": "100",
                        "scope": "default",
                        "line": {
                            "start": 49,
                            "end": 49
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "100",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra light font weight across all components.\n",
                    "commentRange": {
                        "start": 50,
                        "end": 51
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-extra-light",
                        "value": "200",
                        "scope": "default",
                        "line": {
                            "start": 52,
                            "end": 52
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "200",
                    "resolvedType": "Number"
                },
                {
                    "description": "The light font weight across all components.\n",
                    "commentRange": {
                        "start": 53,
                        "end": 54
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-light",
                        "value": "300",
                        "scope": "default",
                        "line": {
                            "start": 55,
                            "end": 55
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "300",
                    "resolvedType": "Number"
                },
                {
                    "description": "The normal font weight across all components.\n",
                    "commentRange": {
                        "start": 56,
                        "end": 57
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-normal",
                        "value": "$kendo-font-weight",
                        "scope": "default",
                        "line": {
                            "start": 58,
                            "end": 58
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "400",
                    "resolvedType": "Number"
                },
                {
                    "description": "The medium font weight across all components.\n",
                    "commentRange": {
                        "start": 59,
                        "end": 60
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-medium",
                        "value": "500",
                        "scope": "default",
                        "line": {
                            "start": 61,
                            "end": 61
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "500",
                    "resolvedType": "Number"
                },
                {
                    "description": "The semibold font weight across all components.\n",
                    "commentRange": {
                        "start": 62,
                        "end": 63
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-semibold",
                        "value": "600",
                        "scope": "default",
                        "line": {
                            "start": 64,
                            "end": 64
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "600",
                    "resolvedType": "Number"
                },
                {
                    "description": "The bold font weight across all components.\n",
                    "commentRange": {
                        "start": 65,
                        "end": 66
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-bold",
                        "value": "700",
                        "scope": "default",
                        "line": {
                            "start": 67,
                            "end": 67
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "700",
                    "resolvedType": "Number"
                },
                {
                    "description": "The extra bold font weight across all components.\n",
                    "commentRange": {
                        "start": 68,
                        "end": 69
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-extra-bold",
                        "value": "800",
                        "scope": "default",
                        "line": {
                            "start": 70,
                            "end": 70
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "800",
                    "resolvedType": "Number"
                },
                {
                    "description": "The most pronounced font weight across all components.\n",
                    "commentRange": {
                        "start": 71,
                        "end": 72
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weight-black",
                        "value": "900",
                        "scope": "default",
                        "line": {
                            "start": 73,
                            "end": 73
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "900",
                    "resolvedType": "Number"
                },
                {
                    "description": "The base letter spacing across all components.\n",
                    "commentRange": {
                        "start": 75,
                        "end": 76
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing",
                        "value": "null",
                        "scope": "default",
                        "line": {
                            "start": 77,
                            "end": 77
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "null",
                    "resolvedType": "Null"
                },
                {
                    "description": "The tightest letter spacing across all components.\n",
                    "commentRange": {
                        "start": 78,
                        "end": 79
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-tightest",
                        "value": "-.15px",
                        "scope": "default",
                        "line": {
                            "start": 80,
                            "end": 80
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "-0.15px",
                    "resolvedType": "Number"
                },
                {
                    "description": "Slightly looser than the tighter letter spacing across all components.\n",
                    "commentRange": {
                        "start": 81,
                        "end": 82
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-tighter",
                        "value": "-.10px",
                        "scope": "default",
                        "line": {
                            "start": 83,
                            "end": 83
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "-0.1px",
                    "resolvedType": "Number"
                },
                {
                    "description": "Moderately tight letter spacing across all components.\n",
                    "commentRange": {
                        "start": 84,
                        "end": 85
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-tight",
                        "value": "-.5px",
                        "scope": "default",
                        "line": {
                            "start": 86,
                            "end": 86
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "-0.5px",
                    "resolvedType": "Number"
                },
                {
                    "description": "The normal letter spacing across all components.\n",
                    "commentRange": {
                        "start": 87,
                        "end": 88
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-normal",
                        "value": "0px",
                        "scope": "default",
                        "line": {
                            "start": 89,
                            "end": 89
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0px",
                    "resolvedType": "Number"
                },
                {
                    "description": "Wide letter spacing across all components.\n",
                    "commentRange": {
                        "start": 90,
                        "end": 91
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-wide",
                        "value": ".5px",
                        "scope": "default",
                        "line": {
                            "start": 92,
                            "end": 92
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.5px",
                    "resolvedType": "Number"
                },
                {
                    "description": "Slightly wider than the wide letter spacing across all components.\n",
                    "commentRange": {
                        "start": 93,
                        "end": 94
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-wider",
                        "value": ".10px",
                        "scope": "default",
                        "line": {
                            "start": 95,
                            "end": 95
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.1px",
                    "resolvedType": "Number"
                },
                {
                    "description": "The widest letter spacing across all components.\n",
                    "commentRange": {
                        "start": 96,
                        "end": 97
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacing-widest",
                        "value": ".15px",
                        "scope": "default",
                        "line": {
                            "start": 98,
                            "end": 98
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "0.15px",
                    "resolvedType": "Number"
                },
                {
                    "description": "The sans font family across all components.\n",
                    "commentRange": {
                        "start": 100,
                        "end": 101
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-family-sans",
                        "value": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
                        "scope": "default",
                        "line": {
                            "start": 102,
                            "end": 102
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
                    "resolvedType": "List"
                },
                {
                    "description": "The serif font family across all components.\n",
                    "commentRange": {
                        "start": 103,
                        "end": 104
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-family-serif",
                        "value": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
                        "scope": "default",
                        "line": {
                            "start": 105,
                            "end": 105
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
                    "resolvedType": "List"
                },
                {
                    "description": "The sans-serif font family across all components.\n",
                    "commentRange": {
                        "start": 106,
                        "end": 107
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-family-sans-serif",
                        "value": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
                        "scope": "default",
                        "line": {
                            "start": 108,
                            "end": 108
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
                    "resolvedType": "List"
                },
                {
                    "description": "The monospace font family across all components.\n",
                    "commentRange": {
                        "start": 109,
                        "end": 110
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-family-monospace",
                        "value": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace",
                        "scope": "default",
                        "line": {
                            "start": 111,
                            "end": 111
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace",
                    "resolvedType": "List"
                },
                {
                    "description": "The base font family across all components.\n",
                    "commentRange": {
                        "start": 113,
                        "end": 114
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-family",
                        "value": "inherit",
                        "scope": "default",
                        "line": {
                            "start": 115,
                            "end": 115
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "inherit",
                    "resolvedType": "String"
                },
                {
                    "description": "The font sizes map\n",
                    "commentRange": {
                        "start": 162,
                        "end": 163
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-sizes",
                        "value": "k-map-merge( $_default-font-sizes, $kendo-font-sizes )",
                        "scope": "private",
                        "line": {
                            "start": 164,
                            "end": 164
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(xxs: 0.5rem, xs: 0.625rem, sm: 0.75rem, md: 0.875rem, lg: 1rem, xl: 1.25rem)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "xxs": "0.5rem",
                        "xs": "0.625rem",
                        "sm": "0.75rem",
                        "md": "0.875rem",
                        "lg": "1rem",
                        "xl": "1.25rem"
                    }
                },
                {
                    "description": "The line heights map\n",
                    "commentRange": {
                        "start": 168,
                        "end": 169
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-line-heights",
                        "value": "k-map-merge( $_default-line-heights, $kendo-line-heights )",
                        "scope": "private",
                        "line": {
                            "start": 170,
                            "end": 170
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(xs: 1, sm: 1.25, md: 1.4285714286, lg: 1.5)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "xs": 1,
                        "sm": 1.25,
                        "md": 1.4285714285714286,
                        "lg": 1.5
                    }
                },
                {
                    "description": "The font weights map\n",
                    "commentRange": {
                        "start": 174,
                        "end": 175
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-weights",
                        "value": "k-map-merge( $_default-font-weights, $kendo-font-weights )",
                        "scope": "private",
                        "line": {
                            "start": 176,
                            "end": 176
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(thin: 100, extra-light: 200, light: 300, normal: 400, medium: 500, semibold: 600, bold: 700)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "thin": 100,
                        "extra-light": 200,
                        "light": 300,
                        "normal": 400,
                        "medium": 500,
                        "semibold": 600,
                        "bold": 700
                    }
                },
                {
                    "description": "The letter spacings map\n",
                    "commentRange": {
                        "start": 180,
                        "end": 181
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-letter-spacings",
                        "value": "k-map-merge( $_default-letter-spacings, $kendo-letter-spacings )",
                        "scope": "private",
                        "line": {
                            "start": 182,
                            "end": 182
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(tightest: -0.15px, tighter: -0.1px, tight: -0.5px, normal: 0px, wide: 0.5px, wider: 0.1px, widest: 0.15px)",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "tightest": "-0.15px",
                        "tighter": "-0.1px",
                        "tight": "-0.5px",
                        "normal": "0px",
                        "wide": "0.5px",
                        "wider": "0.1px",
                        "widest": "0.15px"
                    }
                },
                {
                    "description": "The font families map\n",
                    "commentRange": {
                        "start": 186,
                        "end": 187
                    },
                    "context": {
                        "type": "variable",
                        "name": "kendo-font-families",
                        "value": "k-map-merge( $_default-font-families, $kendo-font-families )",
                        "scope": "private",
                        "line": {
                            "start": 188,
                            "end": 188
                        }
                    },
                    "group": [
                        "typography"
                    ],
                    "access": "public",
                    "file": {
                        "path": "core/scss/typography/index.import.scss",
                        "name": "index.import.scss"
                    },
                    "resolvedValue": "(sans: (Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans), serif: (\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville), sans-serif: (system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"), monospace: (SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace))",
                    "resolvedType": "Map",
                    "prettyValue": {
                        "sans": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
                        "serif": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
                        "sans-serif": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
                        "monospace": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace"
                    }
                }
            ]
        }
    ],
    "meta": {
        "name": "core",
        "friendlyName": "Theme Core"
    }
}