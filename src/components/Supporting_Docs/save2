
import React, { useState, useEffect , useContext} from 'react';
import VerifyStatus from './VerifyStatus';
import Overlay from './Overlay';
import PdfOverlay from './PdfOverlay'; 
import axios from 'axios'; 
import { UserContext } from '../UserContext/UserContext';
import Verification_Docs from './Verification_Docs';
import Document_Verification from './Document_Verification';
import { useRef } from 'react';
import Document_Review from './Document_Review';
import Process_Completed from './Process_Completed';
const VerifyResults = ({ apiResponseData , documentsi }) => 
    
    {

        console.log("Response data: " + apiResponseData.data)
        console.log("Documents: " + documentsi)

        const { token } = useContext(UserContext);
        console.log("token", token);


    const getNullValueFiles = (documents) => {
        return Object.entries(documents)
            .filter(([_, value]) => value === null)
            .map(([key, _]) => key);
    };

    useEffect(() => {
        if (apiResponseData) {
            const nullFiles = getNullValueFiles(apiResponseData);
            setNullFiles(nullFiles);
        }
    }, [apiResponseData]);

    const filterDataWithValues = (data) => {
        return Object.entries(data)
            .filter(([_, value]) => value !== null)
            .reduce((acc, [key, value]) => {
                acc[key] = value;
                return acc;
            }, {});
    };


    const captureRefs = useRef({});
    const [documents, setDocuments] = useState([]);
    const [showFiles, setShowFiles] = useState(false);
    const [selectedButton, setSelectedButton] = useState(null);
    const [availableFiles, setAvailableFiles] = useState([]);
    const [nullFiles, setNullFiles] = useState([]);
    const [addedFiles, setAddedFiles] = useState({});
    const [pdfUrl, setPdfUrl] = useState(null);
    const [pdfUrl1 , setPdfUrl1] = useState(null);
    const [buttonStates, setButtonStates] = useState({});
    const [currentRowIndex, setCurrentRowIndex] = useState(null);
    const [newButtonFlag, setNewButtonFlag] = useState(false);
    const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);
    const [verificationResult, setVerificationResult] = useState(null);
    const [isVerificationPending, setIsVerificationPending] = useState(false);
    const [DocumentVerificationReuslt , setDocumentsVerificationReuslt] = useState([])
    const [Payloader , setPayloader] = useState([]);
    const [payload , setPayload] = useState()
    const [fileVerification, setFileVerification] = useState(false)
    const [pdfFlag , setPDFFlag] = useState(false) 
    const [pdfFlag1 , setPDFFlag1] = useState(false) 
    const [supportFlag , setSupportFlag] = useState(false)
    const [finalPage , setFinalpage] = useState(false)
    const [FinalPage1 , setFinalPage1] = useState(false)
    const [totalDocument, setTotalDocument] = useState(0); // Initialize as 0
    const [processedDocument, setProcessedDocument] = useState(0);
    const [flag , setFlag] = useState(false)
    // const fetchDocuments = async () => {
    //     try {
    //         const response = await axios.post('https://192.168.18.251:8010/GetRequiredDocumentsJson_Filed_46A/');
    //         if (response.status === 200) {
    //             const data = response.data;
    //             if (data.points && Array.isArray(data.points)) {
    //                 setDocuments(data.points);
    //                 console.log("Data Points" , data.points);
    //                 setFileVerification(true)
    //             } else {
    //                 console.warn("No points found in response");
    //             }
    //         } else {
    //             console.error("API returned an unexpected status:", response.status);
    //         }

    //         console.log("Response: " + JSON.stringify(response));
    //     } catch (error) {
    //         console.error('Error fetching documents:', error);
    //     }
    // };
    const [overlayOpen, setOverlayOpen] = useState(false);

    const handleDescriptionClick = (pointDetails) => {
        setClickedPointDetails(pointDetails);
      setOverlayOpen(true);
    };
  
    const closeOverlay = () => {
      setOverlayOpen(false);
    };

    useEffect(() => {
        setDocuments(documentsi)
        setFileVerification(true)
    }, []);

    useEffect(() => {
        if (apiResponseData && apiResponseData.points) {
            setDocuments(apiResponseData.points);
        }
    }, [apiResponseData]);

    const handleAddFilesClick = (rowIndex) => {
        setCurrentRowIndex(rowIndex);
        setShowFiles(true);
    };



    
    const handleFileSelect = (fileName) => {
        console.log("File selected:", fileName);
        if (currentRowIndex !== null) {
            const newAddedFiles = { ...addedFiles };
            const documentKey = documents[currentRowIndex]?.Number;
            console.log("row", documentKey);
    
            if (!newAddedFiles[documentKey]) {
                newAddedFiles[documentKey] = [];
            }
    
            // Count both existing filteredEntries and already added files for the row
            const existingButtonsCount = filteredEntries.filter(([_, value]) => Number(value) === currentRowIndex + 1).length;
            const addedButtonsCount = newAddedFiles[documentKey].length;
    
            // The new button index should be the sum of both counts
            const newButtonIndex = existingButtonsCount + addedButtonsCount;
    
            // Add the new file to the list for the current row
            if (fileName !== null) {
                newAddedFiles[documentKey].push(fileName); // Add new file at the end
                handleFileAddition(fileName);
                setNewButtonFlag(true); // Set flag for new button
            } else {
                newAddedFiles[documentKey].push(null); // Add new file at the end
                handleFileAddition(null);
                setNewButtonFlag(true); // Set flag for new button
            }
    
            setAddedFiles(newAddedFiles);
            setShowFiles(false);
            setCurrentRowIndex(null);
        }
    };
    
    
    
    const handleFileAddition = (newFileName) => {
        setAvailableFiles(prevFiles => {
            if (newFileName === null || !prevFiles.includes(newFileName)) {
                return [newFileName, ...prevFiles]; // Add new file at the beginning
            }
            return prevFiles;
        });
    };

    const handleButtonClick = async (fileName, rowIndex, buttonIndex) => {
        try {
                      setPDFFlag(true);
                      const response = await axios.post('https://192.168.18.251:8010/get_requiredFile/', {
                        filename: fileName
                    }, {
                        responseType: 'blob' // to handle the response as a Blob
                    });
                    
                    console.log("Opening", response);
                    
                    if (response.statusText === 'OK') {
                        console.log("Good");
                    
                        // Create a URL for the Blob (PDF file)
                        const fileUrl = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
                        
                        // Open the URL in a new tab
                        window.open(fileUrl, '_blank');
                    }
            
            // setPdfUrl(fileUrl);
            setSelectedButton({ rowIndex, buttonIndex });
        } catch (error) {
            console.error('Error fetching or downloading the PDF file:', error);
        }finally {
            setPDFFlag(false); 
        }
    };
    const handleButtonClick1 = async (fileName) => {
      try {
        setPDFFlag1(true);
        const response = await axios.post('https://192.168.18.251:8010/get_requiredFile/', {
            filename: fileName
        }, {
            responseType: 'blob' // to handle the response as a Blob
        });
        
        console.log("Opening", response);
        
        if (response.statusText === 'OK') {
            console.log("Good");
        
            // Create a URL for the Blob (PDF file)
            const fileUrl = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
            
            // Open the URL in a new tab
            window.open(fileUrl, '_blank');
        }
          
          setPdfUrl1(fileUrl);
         
      } catch (error) {
          console.error('Error fetching or downloading the PDF file:', error);
      }
      finally {
        setPDFFlag1(false); 
    }
  };
    const [showVerificationDocs, setShowVerificationDocs] = useState(false);
 



const handleProceedClick1 = async () => {
    try {
 
           setFinalPage1(true);
        console.log("Payloader " , Payloader)
    
        const response = await axios.post('https://192.168.18.251:8010/proceedToReportGeneration/', Payloader, {
            headers: {
                'Authorization': `Bearer ${token}`, 
                'Content-Type': 'application/json'
            },
            responseType: 'blob'
        });

        console.log("Response " ,response )
        
       
        
        if(response.statusText === 'OK')
        {
            setFinalPage1(false);
            setFinalpage(true)

             // Handle the PDF response
        const pdfBlob = new Blob([response.data], { type: 'application/pdf' });
        
        // Create a URL for the blob
        const pdfUrl = URL.createObjectURL(pdfBlob);
        
        // Option 1: Open the PDF in a new browser tab
        window.open(pdfUrl);
            
            console.log("Final page response",finalPage)

        }

       
        console.log('Response from proceedToReportGeneration:', response.data);

     
    } catch (error) {
      
        console.error('Error while proceeding to report generation:', error);
       
    }
};

useEffect(() => {
 
      console.log("Final page state has been set to true");
      console.log("Final page" , finalPage)
 
  }, [finalPage]); 
    


    const handleProceedClick = async () => {

    
      const payload1 = {};
      setSupportFlag(true)
      documents.forEach((doc) => {
          const documentNumber = String(doc.Number); // Convert document number to a string
  
          // Get added files for the current document row
          const addedFilesForRow = addedFiles[documentNumber] || [];
          
          // Get filtered files for the current document row
          const filteredFilesForRow = filteredEntries
              .filter(([filteredKey, filteredValue]) => Number(filteredValue) === doc.Number)
              .map(([filteredKey]) => filteredKey);
          
          // Combine added and filtered files
          const allFilesForRow = [...addedFilesForRow, ...filteredFilesForRow];
          
          // If there are any files for the row, construct the payload
          if (allFilesForRow.length > 0) {
              allFilesForRow.forEach((fileName) => {
                  // Set the payload with the document name (including extension) and document number as a string
                  payload1[fileName] = documentNumber;
              });
          }
      });
  
      console.log("payload", payload1);
      
      // To ensure you're using the correct payload in the API call, use payload1 directly
      try {
          const response = await axios.post('https://192.168.18.251:8010/store_documents/', payload1, {
              headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
              }
          });
          
          if (response.status === 200) {
              console.log('Documents successfully stored:', response.data.data);
              setVerificationResult(true);
              setIsVerificationPending(true);
              setPayload(response.data.data); // Store the response data
              console.log('Payload successfully stored:', response.data); 
              startVerificationPolling()// Log the stored response data
          } else {
              console.error('Error storing documents:', response.status);
          }
      } catch (error) {
          console.error('Error during the POST request:', error);
      }
      finally
      {
        setSupportFlag(false)
        
      }
  };
  
  
  
  const pollVerificationStatus = async () => {
    let hasCheckedOnce = false; // Flag to ensure the second API is only called once

    // Polling function to call the first API every 10 seconds
    while (!hasCheckedOnce) {
        try {
            // Call the first verification API
            const response = await axios.post('https://192.168.18.251:8010/DocumentsDetailedVerification/', {
                timeout: 300000, // Set timeout to 5 minutes
            });

            if (response.data.message === 'OK') {
                console.log('Verification completed successfully');
                hasCheckedOnce = true; // Mark that the second API should be called only once

                // Call the second API after waiting for 10 seconds
                await new Promise((resolve) => setTimeout(resolve, 10000)); // Wait 10 seconds
                await fetchDetailedVerificationResult(); 
            } else {
                console.log('Verification still pending or other status:', response.data.message);
            }
        } catch (error) {
            console.error('Error fetching verification status:', error);
        }

        // Wait 10 seconds before the next poll if result is not 'OK'
        if (!hasCheckedOnce) {
            await new Promise((resolve) => setTimeout(resolve, 10000)); // Wait 10 seconds
        }
    }
};

const [done , setDone] = useState(false)

const fetchDetailedVerificationResult = async () => {
    try {
      let firstTime = true; // Flag for first iteration
    let taker ;
      while (true) {
        // Call the second API for detailed verification result
        const response = await axios.post('https://192.168.18.251:8010/DetailedVerificationResult/', {
          timeout: 300000, // Set timeout to 5 minutes
        });

        const message = response.data.message || '';
        console.log('Verification message:', message);

        // Check if the message contains the verification status
        if (message.startsWith("Query after some time, documents verification is in process. Total Steps :")) {
          const totalStepsMatch = message.match(/Total Steps\s*:\s*(\d+)/);
          console.log("Total Steps :", totalStepsMatch)

          const currentStepMatch = message.match(/Current Step (\d+)/);
           
          console.log("Current steps " , currentStepMatch)

          if (totalStepsMatch && currentStepMatch) {
            const totalSteps = parseInt(totalStepsMatch[1], 10);
            let currentStep = parseInt(currentStepMatch[1], 10);
            
            // Ignore the first step
            if (firstTime) {
              currentStep = 0; // Assume current step as 0 for the first time
              firstTime = false; // Mark that first time is handled
            }

            console.log(`Total Steps: ${totalSteps}, Current Step: ${currentStep}`);

            // Update the progress bar based on the current steps
            setTotalDocument(totalSteps);
            setProcessedDocument(currentStep);
            taker = totalSteps

            // If all steps are completed, exit the loop
            // if (currentStep >= totalSteps) {
            //   console.log('Verification complete, all documents processed.');
            //   console.log("Message Convey" , message)
            //   // Wait a few seconds to let the progress bar reach 100% before exiting
            //   await new Promise(resolve => setTimeout(resolve, 5000)); // 5 seconds delay
            //   setDocumentsVerificationReuslt(response.data);
            //   setPayloader(response.data);
            //   setIsVerificationPending(false); // Stop showing verification pending
            //   setShowVerificationDocs(true); // Show the detailed verification results
            //   break;
            // }
          }
        } else {
          console.log('Verification complete or an unexpected message received.');
          setProcessedDocument(taker)
          setDone(true)
          setFlag(true) 
          await new Promise(resolve => setTimeout(resolve, 5000));
          setDocumentsVerificationReuslt(response.data);
          setPayloader(response.data);
          setIsVerificationPending(false); // Stop showing verification pending
          setShowVerificationDocs(true);
          
        
          await new Promise(resolve => setTimeout(resolve, 5000));// Show the detailed verification results
          break; // Exit the loop
        }

        // Wait for a specified time before checking again
        await new Promise(resolve => setTimeout(resolve, 10000)); // 10 seconds delay before polling again
      }
    } catch (error) {
      console.error('Error fetching detailed verification result:', error);
    }
  };



// Call this function whenever you want to start polling, e.g., on a button click
const startVerificationPolling = () => {

        pollVerificationStatus(); // Start the async polling function
    
};


useEffect(() => {
   if(done)
   {
    setFlag(true);
    console.log("Setting the Flag");
   }
    
   
  }, [done]);




const [clickedPointDetails, setClickedPointDetails] = useState(null);
const [verificationStates, setVerificationStates] = useState({});

const handleCheckboxChange = (docNumber, pointKey) => {
    setVerificationStates(prevStates => {
        const newDocState = {
            ...prevStates[docNumber],
            [pointKey]: !prevStates[docNumber]?.[pointKey] // Toggle for the specific pointKey
        };

        return {
            ...prevStates,
            [docNumber]: newDocState
        };
    });
};





useEffect(() => {
    const updatedPayloader = Payloader.map(([docPoints, docNumber]) => {
      
      if (verificationStates[docNumber]) {
        const updatedDocPoints = { ...docPoints };

        Object.keys(verificationStates[docNumber]).forEach(pointKey => {
          if (updatedDocPoints[pointKey]) {
            updatedDocPoints[pointKey].verified_in_doc = verificationStates[docNumber][pointKey];
          }
        });

        return [updatedDocPoints, docNumber];
      }
      return [docPoints, docNumber];
    });

    setPayloader(updatedPayloader);
    console.log("Updated Payloader:", updatedPayloader);
  }, [verificationStates]);


    useEffect(() => {
        console.log("Button states updated:", buttonStates);
    }, [buttonStates]);
    

    const handleAccept = () => {
   
    
        setPdfUrl(null);
    };
    

    const handleReject = () => {
      
        setPdfUrl(null);
    };
    
    const handleRemoveFile = (fileName, docNumber) => {
        // Create a copy of the addedFiles state
        const newAddedFiles = { ...addedFiles };
    
        // Remove the file from the current row's document
        const currentFiles = newAddedFiles[docNumber] || [];
        const updatedFiles = currentFiles.filter(file => file !== fileName);
        
        // Update the addedFiles state with the removed file
        newAddedFiles[docNumber] = updatedFiles;
    
        // Add the file back to the current row's document
        setAddedFiles(newAddedFiles);
        setAvailableFiles(prevFiles => [...prevFiles, fileName]); // Assuming you want to add it back to available files
    };

    const filteredData = filterDataWithValues(apiResponseData || {});
    const filteredEntries = Object.entries(filteredData);

    // Adjust button indexes when a new button is added
    useEffect(() => {
        if (newButtonFlag) {
            setNewButtonFlag(false); // Reset the flag
        }
    }, [newButtonFlag]);

    let counter1 = 1;
    let counter2 = 1;
    const progress = totalDocument ? (processedDocument / totalDocument) * 100 : 0;
    return (
        fileVerification ?
    (
        verificationResult ? (
          showVerificationDocs ? (

            finalPage && !FinalPage1 ? (
              

  <div   className="flex flex-col absolute w-[92%] h-[100%]">
                <div className='flex w-[100%] h-[15%] border-b-[1px] border-[#959191] py-[60px]'>
                  <VerifyStatus uploaded={true} verified={true} processed={true} FirstName={'Document Availability'} SecondName={'User-Assisted Document'} ThirdName={'Process Completed'} />
                </div>
                <div className='mt-72'>
                    <Process_Completed Payloader={Payloader}/>
                    </div>
  
    </div>
 
                   
             
              ) :  !finalPage && !FinalPage1 ?(
                <div   className="flex flex-col absolute w-[92%] h-[100%]">
                <div className='flex w-[100%] h-[15%] border-b-[1px] border-[#959191] py-[60px]'>
                  <VerifyStatus uploaded={true} verified={true} processed={false} FirstName={'Document Availability'} SecondName={'User-Assisted Document'} ThirdName={'Process Completed'} />
                </div>
                <div className="flex flex-col w-[100%] h-[15%] py-[60px] justify-center items-center">
                  <div className='w-[300px] h-9 bg-[#2B333E] text-center font-[500] text-[20px]  text-white items-center'>
                    Documents Verification
     
                   
                  </div>
                 
                </div>
                {/* <div className='flex flex-col justify-end items-end w-full   '>
                     <span>
                     <Document_Review/>
                     </span>
                    </div> */}
                    <Verification_Docs />
                    {/* <div className='flex flex-col justify-end items-end w-full'> */}
                    <div  className="overflow-y-auto h-[70%] p-4 ">
    
      
                    {documents.map((doc, index) => {
    // Find the corresponding verification results for the document
    const verificationResults = Array.isArray(DocumentVerificationReuslt)
        ? DocumentVerificationReuslt.filter(result =>
            result[1] === Number(doc.Number) // Match document number
        )
        : [];

    // Check if there are any unverified points
    const hasUnverifiedPoints = verificationResults.some(result =>
        Object.entries(result[0]).some(([pointKey, pointDetails]) => {
            return verificationStates[doc.Number]?.[pointKey] === false || !pointDetails.verified_in_doc;
        })
    );

    counter2 = 1;
    console.log(verificationResults)
    return (
        <div key={doc.Number} className='verification-doc'>
            <div>
                {verificationResults.length > 0 ? (
                    <div className=''>
                        <div className={`w-[75%] flex flex-col ${hasUnverifiedPoints ? 'bg-[#0564D2] border-[#0564D2] text-white' : 'bg-[#99F0C5D9] border-[#99F0C5D9]'} border-[1px] my-10 rounded-3xl`}>
                            <p className='ml-5 font-[700] my-5'><u>{counter1++}. {doc.Description}</u></p>
                            <div className='flex flex-col h-max'>
                                {verificationResults.map((result, index) => (
                                    <div key={doc.Number} className='flex flex-col space-y-6'>
                                        {Object.entries(result[0]).map(([pointKey, pointDetails]) => {
                                            // Determine the verification state
                                            const isUnverified = verificationStates[doc.Number]?.[pointKey] === false || !pointDetails.verified_in_doc;

                                            return (
                                                <div
                                                    key={`${doc.Number}-${pointKey}`}
                                                    className={`point-details flex items-center mt-8 ml-4  `}
                                                >
                                                    {/* Verification Checkboxes */}
                                                    <div
                                                        className="flex justify-center items-center h-4 w-4 rounded-full cursor-pointer mr-2"
                                                        onClick={() => handleCheckboxChange(doc.Number, pointKey)}
                                                    >
                                                        {/* Conditional rendering for checkboxes */}
                                                        {verificationStates[doc.Number]?.[pointKey] !== undefined ? (
                                                            verificationStates[doc.Number][pointKey] ? (
                                                                <div className='flex h-6 w-6 border-4 border-[#6A6A6A] justify-center items-center rounded-md'>
                                                                    {/* Green Checkmark */}
                                                                    <svg width="21" height="17" viewBox="0 0 21 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                        <path d="M2.05272 7.88769L7.84985 13.9007L15.7297 5.72777L19.414 1.78191" stroke="#1EB953" strokeWidth="3" />
                                                                    </svg>
                                                                </div>
                                                            ) : (
                                                                <div className='flex h-6 w-6 border-4 border-[#6A6A6A] justify-center items-center rounded-md'>
                                                                    {/* Blue Cross */}
                                                                    <svg width="17" height="18" viewBox="0 0 17 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                        <path d="M1.57971 16.2181L7.36951 10.0323L11.3094 5.94586L14.9937 2" stroke="#C80000" strokeWidth="3" />
                                                                        <path d="M15.573 15.6228L9.23405 10.0011L5.04327 6.17233L0.99991 2.59534" stroke="#C80000" />
                                                                    </svg>
                                                                </div>
                                                            )
                                                        ) : (
                                                            pointDetails.verified_in_doc ? (
                                                                <div className='flex h-6 w-6 border-4 border-[#6A6A6A] justify-center items-center rounded-md'>
                                                                    {/* Green Checkmark */}
                                                                    <svg width="21" height="17" viewBox="0 0 21 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                        <path d="M2.05272 7.88769L7.84985 13.9007L15.7297 5.72777L19.414 1.78191" stroke="#1EB953" strokeWidth="3" />
                                                                    </svg>
                                                                </div>
                                                            ) : (
                                                                <div className='flex h-6 w-6 border-4 border-[#6A6A6A] justify-center items-center rounded-md'>
                                                                    {/* Blue Cross */}
                                                                    <svg width="17" height="18" viewBox="0 0 17 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                        <path d="M1.57971 16.2181L7.36951 10.0323L11.3094 5.94586L14.9937 2" stroke="#C80000" strokeWidth="3" />
                                                                        <path d="M15.573 15.6228L9.23405 10.0011L5.04327 6.17233L0.99991 2.59534" stroke="#C80000" />
                                                                    </svg>
                                                                </div>
                                                            )
                                                        )}
                                                    </div>

                                                    <div>
    
      <div className='relative flex flex-row w-full  '>
        <p 
          className='leading-loose w-[100%] cursor-pointer'
          onClick={() => handleDescriptionClick(pointDetails)} 
        >
          {pointDetails.description}
      
        </p>
       
      </div>

  
      {overlayOpen && clickedPointDetails &&  (
        <div className="fixed inset-0 bg-black bg-opacity-5 flex flex-row justify-center items-center z-50">
        
          <div className="bg-white  rounded-lg w-[60%] flex flex-row h-56 border border-[#F4714E]  ">
           
          <div className=' w-[50%]   h-full flex flex-col justify-center items-center text-center'>
           
            <p className="text-gray-700 mb-2 font-bold text-lg">
             {clickedPointDetails.description}
        
            </p>
            </div>

            <div className='bg-[#F4714E]  w-[50%] h-full flex flex-col justify-center items-center font-bold text-lg text-center '>  
                
            <p className="text-white ">
             {clickedPointDetails.reasoning}

            </p>
            
            </div>
            <div className='absolute right-[500px] '>
              <button
              onClick={closeOverlay}
              className=" text-white  font-bold text-3xl"
            >
              &times;
            </button>
                </div>
          
          
          </div>
        </div>
      )}
    </div>
                                                </div>
                                            );
                                        })}

                                 
                                        <div className='flex flex-row w-full'>
                                            <div className='w-full flex flex-col h-20 justify-center items-center bg-white rounded-b-3xl'>
                                                {Object.entries(payload).map(([fileName, docNumber]) => {
                                                    if (docNumber === String(doc.Number)) {
                                                        return (
                                                            <div className='flex flex-row space-x-2'>
                                                                <button
                                                                    key={fileName}
                                                                    className='px-3 py-1 text-black rounded-md space-x-2 '
                                                                    onClick={() => handleButtonClick1(fileName)} // Send the full file name
                                                                >
                                                                   <span className='font-bold'>-</span> {fileName.replace('.pdf', '')} {/* Display the base file name without .pdf */}
                                                                </button>
                                                            </div>
                                                        );
                                                    }
                                                    return null; 
                                                })}
                                            </div>
                                        </div>
                                    </div>
                                ))}

                            </div>
                        </div>

                        {pdfFlag1 && !pdfUrl1 ? (
                            <PdfOverlay
                                url={null}
                                onAccept={handleAccept}
                                onReject={handleReject}
                                onClose={() => setPdfUrl1(null)}
                            />
                        ) : pdfUrl1 ? (
                            <PdfOverlay
                                url={pdfUrl1}
                                onAccept={handleAccept}
                                onReject={handleReject}
                                onClose={() => setPdfUrl1(null)}
                            />
                        ) : null}

                    </div>
                ) : (
                    null
                )}
            </div>
        </div>
    );
})}

    
    </div>
    <div className='flex flex-row w-full justify-center items-center'>
    <button
                    className='relative flex flex-row rounded-full justify-center h-[36px] w-24 items-center bg-white border border-[#2882ff] ml-2'
                    
                 onClick={handleProceedClick1}>
                    <p className='text-blue-400 px-2 font-[600]'>Proceed</p>
                    <p className='absolute right-2 text-blue-400 font-[1000]'></p>
                  </button>
    </div>
    </div>
    
              )  : FinalPage1 ?
              (
                 (<span className="loading loading-infinity loading-lg"></span>)
                ) : (null)
           
           
          // </div>
          ) :  
         
             (
            <div className="flex flex-col absolute w-[92%] h-[100%]">
              <div className='flex w-[100%] h-[15%] border-b-[1px] border-[#959191] py-[60px]'>
                <VerifyStatus processed={true} verified={true} uploaded={true} FirstName={'Document Uploaded'} SecondName={'Document Verification'} ThirdName={'Process Completed'}/>
              </div>
              <div className="flex w-[100%] h-[15%] py-[60px] justify-center items-center">
                <div className='w-[300px] h-9 bg-[#2B333E] text-center font-[500] text-[18px] text-white items-center'>
                  Documents Required
                </div>
              </div>
               
              <div className='w-full h-full flex flex-col justify-center items-center -mt-40'>
                {/* <Document_Verification /> */}
                <div className={`flex flex-col justify-center items-center w-[110%] h-[550px] rounded-[12px] bg-white shadow-none -mt-8`}>
          {/* Progress bar */}
          <div className="mb-5 h-4 overflow-hidden rounded-full bg-gray-200 w-96">
            <div
              className="h-4 animate-pulse rounded-full bg-gradient-to-r transition delay-700 duration-300 ease-in-out ... from-green-500 to-blue-500"
              style={{ width: `${progress}%` }}
            ></div>
           
          </div>
          <div>{`Processed ${processedDocument} out of ${totalDocument} documents`}</div>
          {
              flag?
              (
                <div className='text-lime-500'> ALL THE PROCESS HAVE BEEN COMPLETED </div>
              )
              :
          
           <div className='text-red-400'>NOT COMPLETED</div> }
        </div>
              </div>
            </div>
          )
        ) : (
          <div className="flex flex-col absolute w-[92%] h-[100%] ">
            <div className='flex w-[100%] h-[15%] border-b-[1px] border-[#959191] py-[60px]'>
              <VerifyStatus  FirstName={'Document Uploaded'} SecondName={'Document Verification'} ThirdName={'Process Completed'}  uploaded={true} />
            </div>
            <div className="flex w-[100%] h-[15%] py-[60px] justify-center items-center">
              <div className='w-[300px] h-9 bg-[#2B333E] text-center font-[500] text-[18px] text-white items-center'>
                Documents Required
              </div>
            </div>
            <div className="overflow-y-auto h-[70%] p-4">
    {documents.map((doc, rowIndex) => (
        <div key={rowIndex} className='flex flex-col mb-6 '>
            <div className='w-[100%] flex h-max border-[#6A6A6A] py-3 border-[1px] my-1 '>
                <p className='ml-5 font-[700]'>{doc.Number}. {doc.Description}</p>
            </div>
            <div className='relative w-full'>
                <div className='w-[1000px] grid grid-cols-3 gap-x-0 gap-y-5 my-5'>
                    {(addedFiles[doc.Number] || []).map((button, buttonIndex) => {
                        const existingButtonsCount = filteredEntries.filter(([_, value]) => Number(value) === rowIndex + 1).length;
                        const newButtonIndex = existingButtonsCount + buttonIndex;

                        return (
                            <div className='relative flex border border-[#6A6A6A] flex-row rounded-full h-[46px] w-60 justify-center ' key={`added-${rowIndex}-${newButtonIndex}`}>
                                <button
                                    className={` ml-10 w-full flex-row flex justify-center items-center  `}
                                    onClick={() => handleButtonClick(button, rowIndex, newButtonIndex)}
                                >
                                    <p className='text-center text-xs'>{button.replace('.pdf', '')} </p>
                                </button>
                                <button 
                                    className="mr-5 w-[20%]  font-[1000] flex flex-row justify-end items-center"
                                    onClick={() => handleRemoveFile(button, doc.Number)} // Handle removal
                                >
                                    -
                                </button>
                            </div>
                        );
                    })}
                    {filteredEntries
                        .filter(([filteredKey, filteredValue]) => Number(filteredValue) === rowIndex + 1)
                        .map(([filteredKey], buttonIndex) => {
                            const existingButtonIndex = buttonIndex;
                            return (
                                !addedFiles[doc.Number]?.includes(filteredKey) && (
                                    <div className='relative flex border border-[#6A6A6A] flex-row rounded-full h-[46px] w-60 justify-center' key={`filtered-${rowIndex}-${existingButtonIndex}`}>
                                        <button
                                            className=' ml-10 w-full flex-row flex justify-center items-center  '
                                            onClick={() => handleButtonClick(filteredKey, rowIndex, existingButtonIndex)}
                                        >
                                            <p className='text-center text-xs'>{filteredKey.replace('.pdf', '')}</p>
                                        </button>
                                        <button className="mr-5 w-[20%] font-[1000] flex flex-row justify-end items-center"    onClick={() => handleRemoveFile(fileName, doc.Number)} >
                                            -
                                        </button>
                                    </div>
                                )
                            );
                        })}
                </div>
                <div className='absolute right-0 top-0 my-4 flex items-center'>
                    <button
                        className='relative flex flex-row rounded-full h-[36px] w-24 items-center bg-white border border-[#2882ff] ml-2'
                        onClick={() => handleAddFilesClick(rowIndex)}
                    >
                        <p className='text-blue-400 px-2 font-[600]'>Add Files</p>
                        <p className='absolute right-2 text-blue-400 font-[1000]'>+</p>
                    </button>
                </div>
            </div>
        </div>
    ))}
    {showFiles && (
        <Overlay
            files={nullFiles}
            onClose={() => setShowFiles(false)}
            onFileSelect={handleFileSelect}
        />
    )}



{pdfFlag && !pdfUrl ? (
                 <PdfOverlay
                 url={null}
                 onAccept={handleAccept}
                 onReject={handleReject}
                 onClose={() => setPdfUrl(null)}
             />
            ) : pdfUrl ? (
                <PdfOverlay
                    url={pdfUrl}
                    onAccept={handleAccept}
                    onReject={handleReject}
                    onClose={() => setPdfUrl(null)}
                />
            ) : null}

</div>
            <div className='flex flex-row w-full h-20 items-center justify-center'>
              <button
                className='relative flex flex-row rounded-full justify-center h-[36px] w-24 items-center bg-white border border-[#2882ff] ml-2'
                onClick={handleProceedClick}
              >
                <p className='text-blue-400 px-2 font-[600]'>Proceed</p>
                <p className='absolute right-2 text-blue-400 font-[1000]'></p>
              </button>
            </div>
          </div>
        )
    ) :
    (<span className="loading loading-infinity loading-lg"></span>)
      );
      
};

export default VerifyResults;



setIsCompResult(true);