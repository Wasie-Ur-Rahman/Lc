import React, { useState , useEffect } from 'react';
import { SlCloudUpload } from "react-icons/sl";
import { FaFilePdf, FaFileImage } from "react-icons/fa";
import simulatedData from './Comp.json';
import axios from 'axios';
import { useContext } from 'react';
import { UserContext } from '../UserContext/UserContext';
const NewUpload = ({ setIsCompResult, setApiResponseData , setToken , setIsLoggedIn, handleLogout}) => {
  const { token , apiResonseData_Saver , setActiveFlag, setApiResonseData_Saver  , activeFlag , setFlagsetter , setCount , setMT700 , mt700} = useContext(UserContext); 
  console.log("token",token)

  useEffect(() => {
    setFlagsetter(false)
    console.log("Setting the flag false")
  }, []);
  useEffect(() => {
    const interval = setInterval(() => {
      console.log("checking")
      if(token === null)
      {
        console.log("Checking")
        setIsLoggedIn(false)
        handleLogout()
      }
    
    }, 200); 


    return () => clearInterval(interval);
  }, []);


  

  
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isLoaded, setIsLoaded] = useState(false);
  const [uploadError, setUploadError] = useState("");
  const [uploadErrorCode, setUploadErrorCode] = useState("");
  const [uploadErrorText, setUploadErrorText] = useState("");
  const [uploading, setUploading] = useState(false);  // New state for uploading
  const [dragActive, setDragActive] = useState(false); // New state for drag and drop

  
  const handleFileChange = (event) => {
    const files = Array.from(event.target.files);
    if (files.length > 0) {
      setSelectedFiles(files);
      setLoading(false);
      setIsLoaded(false);
      setUploading(false); // Reset uploading state
      setUploadError("");
    }
  };

  const handleDragOver = (event) => {
    event.preventDefault();
    event.stopPropagation();
    setDragActive(true);
  };

  const handleDragLeave = (event) => {
    event.preventDefault();
    event.stopPropagation();
    setDragActive(false);
  };

  const handleDrop = (event) => {
    event.preventDefault();
    event.stopPropagation();
    setDragActive(false);

    const files = Array.from(event.dataTransfer.files);
    if (files.length > 0) {
      setSelectedFiles(files);
      setLoading(false);
      setIsLoaded(false);
      setUploading(false); // Reset uploading state
      setUploadError("");
    }
  };

  const apiUrlAllUpload = `https://192.168.18.251:8010/upload_All_LC_Files`;

  const uploadFiles = async (files) => {
    const formData = new FormData();
    files.forEach(file => formData.append('files', file)); // Append each file to FormData
    setLoading(true);
    setUploading(true); // Set uploading to true
  
    try {
      const response = await fetch(`${apiUrlAllUpload}/`, { // Ensure the URL ends with a `/`
        method: 'POST',
        body: formData, // Pass the FormData with the files
        headers: {
          'Accept': 'application/json', // Accept JSON response from server
          'Authorization': `Bearer ${token}` // Bearer token for authorization
        },
      });
  
      if (response.ok) {
        console.log("great")
        const result = await response.json();
        const responseData = {
          mt701: result['701'] || {},
          mt707: result['707'] || [],
          mandatory700: result['Mandatory700'] || {},
          optional700: result['Optional700'] || {},
          msg700: result['msg700'] || {}, 
          msg701: result['msg701'] || {}, 
          msg707: result['msg707'] || {}
        };
  
        setApiResponseData(responseData);
        setApiResonseData_Saver (responseData);
        setLoading(false);
        setIsLoaded(true);
        setCount(0)
        setIsCompResult(true);
        setActiveFlag (true)
        console.log("Active Flag" , activeFlag)
        setUploading(false); // Set uploading to false
        setUploadError("");
      } else {
        console.error('Upload failed', response.status, response.statusText);
        setUploadError('Upload failed:');
        setUploadErrorCode(response.status);
        setUploadErrorText(response.statusText);
        setLoading(false);
        setUploading(false); // Set uploading to false
  
        if (response.status === 401) {
          setTimeout(() => {
            setIsLoggedIn(false);
            handleLogout();
          }, 2000);
        }
      }
    } catch (error) {
      console.error('Error uploading files:', error);
      setUploadError("An error occurred. Please try again.");
      setLoading(false);
      setUploading(false); // Set uploading to false
    }
  };

  const getFileIcon = (fileType) => {
    if (fileType.includes('pdf')) {
      return <FaFilePdf className='text-red-600 text-[140%]' />;
    } else if (fileType.includes('image')) {
      return <FaFileImage className='text-blue-600 text-[140%]' />;
    } else {
      return null;
    }
  };

  const formatFileSize = (size) => {
    const units = ['B', 'KB', 'MB'];
    let i = 0;
    while (size >= 1024 && i < units.length - 1) {
      size /= 1024;
      i++;
    }
    return `${size.toFixed(2)} ${units[i]}`;
  };

  return (
    <div 
  className={`flex flex-col justify-center items-center w-[130%] 4k:h-[1000px]   Laptops:w-[120%] h-[500px] Laptops L:h-[200px] rounded-[12px]   shadow-none`}
  onDragOver={handleDragOver}
  onDragLeave={handleDragLeave}
  onDrop={handleDrop}
>
  {/* <p className='text-center w-[100%] pt-4 text-black text-[40px] font-[650] tracking-wide mb-[2%]'>
    Select all the PDF documents to upload
  </p> */}

  <div className={`border-2 border-dashed ${dragActive ? 'border-blue-500' : 'border-gray-400'} rounded-lg px-2 py-4 text-center w-[90%] mx-auto mb-[2%] flex flex-col ${(loading || isLoaded) ? 'justify-between' : 'justify-center'} ${(selectedFiles.length > 0) ? 'h-[94%] mt-5  Laptops:h-[80%]   Laptops:mt-5  4k:h-[100%]' : 'h-[650px] 4k:h-[650px]   Laptops:h-[375px]  Laptops:mt-6  '}`}>
    <div className='flex flex-col mx-auto gap-1'>
      <SlCloudUpload className='self-center text-[80px]' />
      <p className="text-black font-inconsolata font-[900] text-xl">Select files or drag and drop here</p>
      <p className="text-[#000000] opacity-[40%] font-inconsolata font-[600] text-xl">Only <span className="text-red-500 ">PDF</span> files are supported</p>
      <input
        type="file"
        className="hidden"
        id="fileInput"
        accept=".pdf"
        multiple
        onChange={handleFileChange}
      />
      <label htmlFor="fileInput" className="w-[50%] px-[6px] py-1 mt-[4%] self-center cursor-pointer text-[#3070AB] border-[1px] border-[#3070AB] rounded-md">
        Select Files
      </label>
    </div>

    {selectedFiles.length > 0 && (
  <div className="w-[95%]  Laptops:max-h-[150px]  4k:max-h-[300px] Laptops L:max-h-[200px]   overflow-y-auto">
    {selectedFiles.slice(0, 100).map(file => (
      <div key={file.name} className="flex items-center justify-between mb-[2px]">
        <div className="flex items-center gap-2 h-7 px-10">
          {getFileIcon(file.type)}
          <span className="text-[13px]">{file.name}</span>
        </div>
        <span className="text-[13px]">({formatFileSize(file.size)})</span>
      </div>
    ))}
    {uploadError && !uploading && (
      <p className="mt-2 text-[18px] text-blue-900">
        {uploadErrorCode} {uploadErrorText} {uploadErrorCode === 401 ? 'Logging out ' : ''}
        <span className="dot1 text-blue-900">.</span>
        <span className="dot2 text-blue-900">.</span>
        <span className="dot3 text-blue-900">.</span>
      </p>
    )}
  </div>
)}
import React, { useState , useEffect } from 'react';
// import { SlCloudUpload } from "react-icons/sl";
// import { FaFilePdf, FaFileImage } from "react-icons/fa";
// import simulatedData from './Comp.json';
// import axios from 'axios';
// import { useContext } from 'react';
// import { UserContext } from '../UserContext/UserContext';
// const NewUpload = ({ setIsCompResult, setApiResponseData , setToken , setIsLoggedIn, handleLogout}) => {
//   const { token , apiResonseData_Saver , setActiveFlag, setApiResonseData_Saver  , activeFlag , setFlagsetter , setCount , setMT700 , mt700} = useContext(UserContext); 
//   console.log("token",token)

//   useEffect(() => {
//     setFlagsetter(false)
//     console.log("Setting the flag false")
//   }, []);
//   useEffect(() => {
//     const interval = setInterval(() => {
//       console.log("checking")
//       if(token === null)
//       {
//         console.log("Checking")
//         setIsLoggedIn(false)
//         handleLogout()
//       }
    
//     }, 200); 


//     return () => clearInterval(interval);
//   }, []);


  

  
//   const [selectedFiles, setSelectedFiles] = useState([]);
//   const [loading, setLoading] = useState(false);
//   const [isLoaded, setIsLoaded] = useState(false);
//   const [uploadError, setUploadError] = useState("");
//   const [uploadErrorCode, setUploadErrorCode] = useState("");
//   const [uploadErrorText, setUploadErrorText] = useState("");
//   const [uploading, setUploading] = useState(false);  // New state for uploading
//   const [dragActive, setDragActive] = useState(false); // New state for drag and drop

  
//   const handleFileChange = (event) => {
//     const files = Array.from(event.target.files);
//     if (files.length > 0) {
//       setSelectedFiles(files);
//       setLoading(false);
//       setIsLoaded(false);
//       setUploading(false); // Reset uploading state
//       setUploadError("");
//     }
//   };

//   const handleDragOver = (event) => {
//     event.preventDefault();
//     event.stopPropagation();
//     setDragActive(true);
//   };

//   const handleDragLeave = (event) => {
//     event.preventDefault();
//     event.stopPropagation();
//     setDragActive(false);
//   };

//   const handleDrop = (event) => {
//     event.preventDefault();
//     event.stopPropagation();
//     setDragActive(false);

//     const files = Array.from(event.dataTransfer.files);
//     if (files.length > 0) {
//       setSelectedFiles(files);
//       setLoading(false);
//       setIsLoaded(false);
//       setUploading(false); // Reset uploading state
//       setUploadError("");
//     }
//   };

//   const apiUrlAllUpload = `https://192.168.18.251:8010/upload_All_LC_Files`;

//   const uploadFiles = async (files) => {
//     const formData = new FormData();
//     files.forEach(file => formData.append('files', file)); // Append each file to FormData
//     setLoading(true);
//     setUploading(true); // Set uploading to true
  
//     try {
//       const response = await fetch(`${apiUrlAllUpload}/`, { // Ensure the URL ends with a `/`
//         method: 'POST',
//         body: formData, // Pass the FormData with the files
//         headers: {
//           'Accept': 'application/json', // Accept JSON response from server
//           'Authorization': `Bearer ${token}` // Bearer token for authorization
//         },
//       });
  
//       if (response.ok) {
//         console.log("great")
//         const result = await response.json();
//         const responseData = {
//           mt701: result['701'] || {},
//           mt707: result['707'] || [],
//           mandatory700: result['Mandatory700'] || {},
//           optional700: result['Optional700'] || {},
//           msg700: result['msg700'] || {}, 
//           msg701: result['msg701'] || {}, 
//           msg707: result['msg707'] || {}
//         };
  
//         setApiResponseData(responseData);
//         setApiResonseData_Saver (responseData);
//         setLoading(false);
//         setIsLoaded(true);
//         setCount(0)
//         setIsCompResult(true);
//         setActiveFlag (true)
//         console.log("Active Flag" , activeFlag)
//         setUploading(false); // Set uploading to false
//         setUploadError("");
//       } else {
//         console.error('Upload failed', response.status, response.statusText);
//         setUploadError('Upload failed:');
//         setUploadErrorCode(response.status);
//         setUploadErrorText(response.statusText);
//         setLoading(false);
//         setUploading(false); // Set uploading to false
  
//         if (response.status === 401) {
//           setTimeout(() => {
//             setIsLoggedIn(false);
//             handleLogout();
//           }, 2000);
//         }
//       }
//     } catch (error) {
//       console.error('Error uploading files:', error);
//       setUploadError("An error occurred. Please try again.");
//       setLoading(false);
//       setUploading(false); // Set uploading to false
//     }
//   };

//   const getFileIcon = (fileType) => {
//     if (fileType.includes('pdf')) {
//       return <FaFilePdf className='text-red-600 text-[140%]' />;
//     } else if (fileType.includes('image')) {
//       return <FaFileImage className='text-blue-600 text-[140%]' />;
//     } else {
//       return null;
//     }
//   };

//   const formatFileSize = (size) => {
//     const units = ['B', 'KB', 'MB'];
//     let i = 0;
//     while (size >= 1024 && i < units.length - 1) {
//       size /= 1024;
//       i++;
//     }
//     return `${size.toFixed(2)} ${units[i]}`;
//   };

//   return (
//     <div 

//     className={`flex flex-col justify-center items-center w-[130%] 4k:h-[1000px]   Laptops:w-[120%] h-[500px] Laptops L:h-[200px] rounded-[12px]   shadow-none`}
//   onDragOver={handleDragOver}
//   onDragLeave={handleDragLeave}
//   onDrop={handleDrop}
// >
//   {/* <p className='text-center w-[100%] pt-4 text-black text-[40px] font-[650] tracking-wide mb-[2%]'>
//     Select all the PDF documents to upload
//   </p> */}

// <div className={`border-2 border-dashed ${dragActive ? 'border-blue-500' : 'border-gray-400'} rounded-lg px-2 py-4 text-center w-[90%] mx-auto mb-[2%] flex flex-col ${(loading || isLoaded) ? 'justify-between' : 'justify-center'} ${(selectedFiles.length > 0) ? 'h-[94%] mt-5  Laptops:h-[80%]   Laptops:mt-5  4k:h-[100%]' : 'h-[650px] 4k:h-[650px]   Laptops:h-[375px]  Laptops:mt-6  '}`}>
//     <div className='flex flex-col mx-auto gap-1'>
//       <SlCloudUpload className='self-center text-[80px]' />
//       <p className="text-black font-inconsolata font-[900] text-xl">Select files or drag and drop here</p>
//       <p className="text-[#000000] opacity-[40%] font-inconsolata font-[600] text-xl">Only <span className="text-red-500 ">PDF</span> files are supported</p>
//       <input
//         type="file"
//         className="hidden"
//         id="fileInput"
//         accept=".pdf"
//         multiple
//         onChange={handleFileChange}
//       />
//       <label htmlFor="fileInput" className="w-[50%] px-[6px] py-1 mt-[4%] self-center cursor-pointer text-[#3070AB] border-[1px] border-[#3070AB] rounded-md">
//         Select Files
//       </label>
//     </div>

//     {selectedFiles.length > 0 && (
//     <div className="w-[95%]  Laptops:max-h-[150px]  4k:max-h-[300px] Laptops L:max-h-[200px]   overflow-y-auto">

//         {selectedFiles.slice(0, 50).map(file => (
//           <div key={file.name} className="flex items-center justify-between mb-[2px] ">
//             <div className='flex items-center gap-2 h-7 px-10 '>
//               {getFileIcon(file.type)}
//               <span className='text-[13px]'>{file.name}</span>
//             </div>
//             <span className='text-[13px]'>({formatFileSize(file.size)})</span>
//           </div>
//         ))}
      
//         {uploadError && !uploading && <p className=" mt-2 text-[18px]">{uploadErrorCode} {uploadErrorText} {uploadErrorCode === 401 ? 'Logging out ' : ''} 
//           <span className="dot1">.</span>
//           <span className="dot2">.</span>
//           <span className="dot3">.</span>
//         </p>}
//       </div>
//     )}
//     {uploading && (
//           <div className="flex flex-row h-20 justify-center items-start   ">
//             <p className="text-blue-600 text-[20px] animate-pulse font-bold">Uploading
//               <span className="dot1">.</span>
//               <span className="dot2">.</span>
//               <span className="dot3">.</span>
//             </p>
//           </div>
//         )}


//   </div>

//   <div className='flex w-[92%] h-[52px] py-4 mx-12  border-t-[1px]  justify-end gap-3 pr-4  '>
//     <button
//       onClick={() => {
//         setLoading(false);
//         setIsLoaded(false);
//         setSelectedFiles([]);
//         setUploadError("");
//         setUploading(false); 
//       }}
//       className={`border flex-row flex justify-center w-40 items-center h-12 px-2 py-1 my-auto rounded-md text-[14px] ${isLoaded ? 'bg-[#145DA0] text-white' : 'bg-transparent text-black '} `}
//     >
//       Cancel
//     </button>

//     <button
//       onClick={() => {
//         if (selectedFiles.length > 0) {
//           uploadFiles(selectedFiles);
//         }
//       }}
//       className={`border w-40 h-12 px-2 py-1 my-auto rounded-md flex-row flex justify-center items-center text-[#0F91D2]`}
//     >
//       Upload
//     </button>
//   </div>
// </div>

//   );
// };

// export default NewUpload;

