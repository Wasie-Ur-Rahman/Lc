/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import { Sankey as O } from "@progress/kendo-charts";
import { loadTheme as D } from "./theme-service.mjs";
import { validatePackage as H, useRtl as I, canUseDOM as K } from "@progress/kendo-react-common";
import { packageMetadata as M } from "../package-metadata.mjs";
import { sankeyPropTypes as V } from "./propTypes.mjs";
import { TooltipComponent as A, NodeTooltipContent as F, LinkTooltipContent as U } from "./SankeyTooltip.mjs";
const S = 12, p = {
  offset: S,
  visible: !0
}, W = ["nodeEnter", "nodeLeave", "linkEnter", "linkLeave", "nodeClick", "linkClick"], $ = (n, c) => {
  n && (n.unbind(), W.forEach((o) => {
    c[o] && n.bind(o, c[o]);
  }));
}, P = t.forwardRef((n, c) => {
  H(M);
  const o = t.useRef(null), r = t.useRef(null), s = I(o, n.dir, [n.dir, o.current]), d = t.useRef(null), { data: k, links: m, nodes: y, labels: v, title: E, legend: C, tooltip: u = p, disableAutoLayout: b, disableKeyboardNavigation: g } = n, T = t.useRef();
  T.current = n;
  const [L, R] = t.useState(null), N = t.useCallback((l) => {
    const {
      visible: a,
      offset: e = S,
      nodeComponent: f = F,
      linkComponent: w = U
    } = { ...p, ...u };
    if (a) {
      const x = {
        event: l,
        offset: e,
        dir: s,
        Content: l.targetType === "node" ? f : w
      };
      R(x);
    }
  }, [u, s]), h = t.useCallback(() => {
    R(null);
  }, []), i = t.useCallback((l, a) => {
    const e = T.current[l];
    if (e) {
      const f = {
        ...a,
        nativeEvent: a.originalEvent,
        target: d.current
      };
      e.call(void 0, f);
    }
  }, []);
  return t.useEffect(() => {
    const l = {
      data: k,
      links: m,
      nodes: y,
      labels: v,
      title: E,
      legend: C,
      disableAutoLayout: b,
      disableKeyboardNavigation: g,
      rtl: s === "rtl",
      tooltip: { ...p, ...u }
    };
    return r.current ? r.current.setOptions(l) : K && o.current && D(o.current.ownerDocument, (a) => {
      r.current = new O(o.current, l, a), $(r.current, {
        nodeEnter: (e) => {
          i("onNodeEnter", e);
        },
        nodeLeave: (e) => {
          i("onNodeLeave", e);
        },
        linkEnter: (e) => {
          i("onLinkEnter", e);
        },
        linkLeave: (e) => {
          i("onLinkLeave", e);
        },
        nodeClick: (e) => {
          i("onNodeClick", e);
        },
        linkClick: (e) => {
          i("onLinkClick", e);
        }
      }), r.current.bind("tooltipShow", N), r.current.bind("tooltipHide", h);
    }), () => {
      r.current && (r.current.destroy(), r.current = null);
    };
  }, [k, m, y, v, E, C, b, g, s, u, h, N, i]), t.useImperativeHandle(d, () => ({
    get element() {
      return o.current;
    },
    exportVisual: (l) => r.current.exportVisual(l),
    props: n
  }), []), t.useImperativeHandle(c, () => d.current), /* @__PURE__ */ t.createElement(t.Fragment, null, /* @__PURE__ */ t.createElement(
    "div",
    {
      ref: o,
      className: n.className,
      style: n.style,
      dir: s
    }
  ), L && /* @__PURE__ */ t.createElement(A, { ...L }));
});
P.propTypes = V;
P.displayName = "KendoReactSankey";
export {
  P as Sankey
};
