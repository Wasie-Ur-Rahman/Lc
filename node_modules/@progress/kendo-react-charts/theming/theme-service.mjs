/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { chartBaseTheme as n } from "@progress/kendo-charts";
const r = (t) => `${t.fontWeight} ${t.fontSize} ${t.fontFamily}`, d = (t) => window.getComputedStyle(t).backgroundColor, v = (t) => t.toLowerCase().charCodeAt(0) - 97, u = (t) => {
  const e = t.match(/series-([a-z])$/);
  if (e !== null)
    return v(e[1]);
  const s = t.split("--series-")[1];
  return parseInt(s, 10) - 1;
}, m = 30, p = () => {
  let t = `
      <div class="k-var--series-a"></div>
      <div class="k-var--series-b"></div>
      <div class="k-var--series-c"></div>
      <div class="k-var--series-d"></div>
      <div class="k-var--series-e"></div>
      <div class="k-var--series-f"></div>
`;
  for (let e = 0; e < m; e++)
    t += `
      <div class="k-var--series-${e + 1}"></div>`;
  return t;
}, f = `
    <div class="k-var--primary"></div>
    <div class="k-var--base"></div>
    <div class="k-var--background"></div>

    <div class="k-var--normal-background"></div>
    <div class="k-var--normal-text-color"></div>
    <div class="k-var--hover-background"></div>
    <div class="k-var--hover-text-color"></div>
    <div class="k-var--selected-background"></div>
    <div class="k-var--selected-text-color"></div>
    <div class="k-var--chart-error-bars-background"></div>
    <div class="k-var--chart-notes-background"></div>
    <div class="k-var--chart-notes-border"></div>
    <div class="k-var--chart-notes-lines"></div>
    <div class="k-var--chart-crosshair-background"></div>

    <div class="k-var--chart-inactive"></div>
    <div class="k-var--chart-major-lines"></div>
    <div class="k-var--chart-minor-lines"></div>
    <div class="k-var--chart-area-opacity"></div>
    <div class="k-var--chart-area-inactive-opacity"></div>
    <div class="k-var--chart-line-inactive-opacity"></div>

    <div class="k-widget k-chart">
        <div class="k-var--chart-font"></div>
        <div class="k-var--chart-title-font"></div>
        <div class="k-var--chart-pane-title-font"></div>
        <div class="k-var--chart-label-font"></div>
    </div>

    <div class="k-var--series-unset"></div>
    <div class="k-var--series">
      ${p()}
    </div>
`;
class y {
  constructor(e) {
    this.store = e;
  }
  setStyle(e, s) {
    this.store.dispatch({ type: "set", payload: { field: e, value: s } });
  }
  setColors() {
    this.mapColor("axisDefaults.crosshair.color", "chart-crosshair-background"), this.mapColor("axisDefaults.labels.color", "normal-text-color"), this.mapColor("axisDefaults.line.color", "chart-major-lines"), this.mapColor("axisDefaults.majorGridLines.color", "chart-major-lines"), this.mapColor("axisDefaults.minorGridLines.color", "chart-minor-lines"), this.mapColor("axisDefaults.notes.icon.background", "chart-notes-background"), this.mapColor("axisDefaults.notes.icon.border.color", "chart-notes-border"), this.mapColor("axisDefaults.notes.line.color", "chart-notes-lines"), this.mapColor("axisDefaults.title.color", "normal-text-color"), this.mapColor("chartArea.background", "background"), this.mapColor("legend.inactiveItems.labels.color", "chart-inactive"), this.mapColor("legend.inactiveItems.markers.color", "chart-inactive"), this.mapColor("legend.labels.color", "normal-text-color"), this.mapColor("seriesDefaults.boxPlot.downColor", "chart-major-lines"), this.mapColor("seriesDefaults.boxPlot.mean.color", "base"), this.mapColor("seriesDefaults.boxPlot.median.color", "base"), this.mapColor("seriesDefaults.boxPlot.whiskers.color", "primary"), this.mapColor("seriesDefaults.bullet.target.color", "normal-text-color"), this.mapColor("seriesDefaults.candlestick.downColor", "normal-text-color"), this.mapColor("seriesDefaults.candlestick.line.color", "normal-text-color"), this.mapColor("seriesDefaults.errorBars.color", "chart-error-bars-background"), this.mapColor("seriesDefaults.horizontalWaterfall.line.color", "chart-major-lines"), this.mapColor("seriesDefaults.icon.border.color", "chart-major-lines"), this.mapColor("seriesDefaults.labels.background", "background"), this.mapColor("seriesDefaults.labels.color", "normal-text-color"), this.mapColor("seriesDefaults.notes.icon.background", "chart-notes-background"), this.mapColor("seriesDefaults.notes.icon.border.color", "chart-notes-border"), this.mapColor("seriesDefaults.notes.line.color", "chart-notes-lines"), this.mapColor("seriesDefaults.verticalBoxPlot.downColor", "chart-major-lines"), this.mapColor("seriesDefaults.verticalBoxPlot.mean.color", "base"), this.mapColor("seriesDefaults.verticalBoxPlot.median.color", "base"), this.mapColor("seriesDefaults.verticalBoxPlot.whiskers.color", "primary"), this.mapColor("seriesDefaults.verticalBullet.target.color", "normal-text-color"), this.mapColor("seriesDefaults.waterfall.line.color", "chart-major-lines"), this.mapColor("title.color", "normal-text-color"), this.mapColor("subtitle.color", "normal-text-color");
    const e = parseFloat(this.queryStyle("chart-area-opacity").opacity);
    isNaN(e) || (this.setStyle("seriesDefaults.area.opacity", e), this.setStyle("seriesDefaults.radarArea.opacity", e), this.setStyle("seriesDefaults.verticalArea.opacity", e), this.setStyle("seriesDefaults.labels.opacity", e)), this.setInactiveOpacity(["area", "verticalArea"], "chart-area-inactive-opacity"), this.setInactiveOpacity(["line", "verticalLine"], "chart-line-inactive-opacity");
  }
  setFonts() {
    const e = r(this.queryStyle("chart-font")), s = r(this.queryStyle("chart-title-font")), a = r(this.queryStyle("chart-pane-title-font")), o = r(this.queryStyle("chart-label-font"));
    this.setStyle("axisDefaults.labels.font", o), this.setStyle("axisDefaults.notes.label.font", e), this.setStyle("axisDefaults.title.font", e), this.setStyle("legend.labels.font", e), this.setStyle("seriesDefaults.labels.font", o), this.setStyle("seriesDefaults.notes.label.font", e), this.setStyle("title.font", s), this.setStyle("subtitle.font", a), this.setStyle("paneDefaults.title.font", a);
  }
  setSeriesColors() {
    const e = this.element, s = [].slice.call(e.querySelectorAll(".k-var--series div")), a = d(e.querySelector(".k-var--series-unset")), o = s.reduce(
      (l, i) => {
        const h = u(i.className), c = d(i);
        return c !== a && (l[h] = c), l;
      },
      []
      // Will populate the series colors in this array
    );
    this.setStyle("seriesColors", o);
  }
  mapColor(e, s) {
    this.setStyle(e, this.queryStyle(s).backgroundColor);
  }
  queryStyle(e) {
    const s = this.element;
    return window.getComputedStyle(s.querySelector(`.k-var--${e}`));
  }
  setInactiveOpacity(e, s) {
    const a = parseFloat(this.queryStyle(s).opacity);
    !isNaN(a) && a < 1 && e.forEach(
      (o) => this.setStyle(`seriesDefaults.${o}.highlight.inactiveOpacity`, a)
    );
  }
}
const C = (t, e, s) => {
  const a = new y(t);
  if (typeof s == "undefined") {
    t.dispatch({ type: "push", payload: n() });
    return;
  }
  const o = a.element = s.createElement("div");
  o.style.display = "none", o.innerHTML = f, s.body.appendChild(o);
  try {
    t.dispatch({ type: "push", payload: n() }), a.setColors(), a.setFonts(), a.setSeriesColors();
  } finally {
    s.body.removeChild(a.element), delete a.element, e();
  }
};
export {
  C as loadTheme
};
